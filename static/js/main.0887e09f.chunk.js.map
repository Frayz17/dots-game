{"version":3,"sources":["components/Header/style/useStyles.js","components/Header/index.js","components/Header/Header.js","components/ConfigInputs/style/styleBtnSumit.js","services/Store/reducers/gameStartFlag/gameStartFlagOptions.js","components/ConfigInputs/SubmitBtn.js","utils/isObjEmpty.js","utils/getCurrentDate.js","services/Store/Store.js","services/Store/reducers/gameDificulty/index.js","services/Store/reducers/gameDificulty/gameDificulty.js","services/Store/reducers/gameDificulty/actions/actionTypes.js","services/Store/reducers/gameStartFlag/actions/gameStop.js","services/Store/reducers/gameStartFlag/actions/actionTypes.js","services/Store/reducers/gameStartFlag/index.js","services/Store/reducers/gameStartFlag/gameStartFlag.js","services/Store/reducers/player/actions/setPlayerTimeScore.js","services/Store/reducers/player/actions/actionTypes.js","services/Store/reducers/player/index.js","services/Store/reducers/player/player.js","services/Store/reducers/board/actions/fieldCounterIncrement.js","services/Store/reducers/board/actions/actionTypes.js","services/Store/reducers/board/actions/setBoardFields.js","services/Store/reducers/board/index.js","services/Store/reducers/board/board.js","services/Store/reducers/winnersList/index.js","services/Store/reducers/winnersList/winnersList.js","services/Store/reducers/winnersList/actions/actionTypes.js","components/ConfigInputs/functions/handleSelectDificulty.js","services/Store/reducers/gameDificulty/actions/chooseGameDificulty.js","components/ConfigInputs/functions/handleSetPlayerName.js","services/Store/reducers/player/actions/setPlayerName.js","components/ConfigInputs/functions/handleFormSubmit.js","services/Store/reducers/gameStartFlag/actions/gameStart.js","services/Store/reducers/gameStartFlag/actions/gameStartFlagReset.js","services/Store/reducers/board/actions/boardReset.js","services/Store/reducers/player/actions/playerResetGame.js","components/ConfigInputs/style/styleConfigInputs.js","components/ConfigInputs/index.js","components/ConfigInputs/ConfigInputs.js","components/ConfigInputs/functions/setDificultyList.js","services/Store/reducers/gameDificulty/actions/setGameDificultyList.js","components/ConfigInputs/functions/stringFormatter.js","components/InfoText/style/infoTextStyle.js","components/InfoText/index.js","components/InfoText/InfoText.js","components/Board/functions/fieldChangeStatus.js","components/Board/functions/BuildBoard.js","utils/arrayShuffle.js","components/Board/functions/tryToCatch.js","services/Store/reducers/board/actions/playerScoreIncrement.js","components/Board/style/StyleCell.js","components/Board/BoardCell.js","modules/DotsGame/functions/getPlayerTimeScore.js","components/WinnersList/functions/getWinnersListFromServer.js","components/WinnersList/functions/refreshWinnersListToStore.js","services/Store/reducers/winnersList/actions/setWinnersList.js","modules/DotsGame/functions/postSendWinners.js","modules/DotsGame/functions/updateServerWinners.js","modules/DotsGame/functions/handlerPlayerWin.js","services/Store/reducers/player/actions/setPlayerTimeEndPlay.js","services/Store/reducers/player/actions/setPlayerWin.js","modules/DotsGame/functions/handlerPlayerLoose.js","services/Store/reducers/player/actions/setPlayerLoose.js","components/Board/index.js","components/Board/Board.js","components/Board/style/StyleBoard.js","services/Store/reducers/player/actions/setPlayerTimeStartPlay.js","services/Store/reducers/board/actions/pcScoreIncrement.js","sections/MainPanel/index.js","sections/MainPanel/MainPanel.js","components/WinnersList/Winner.js","components/WinnersList/style/winnersListStyle.js","components/WinnersList/index.js","components/WinnersList/WinnersList.js","sections/InfoPanel/InfoPanel.js","sections/InfoPanel/index.js","modules/DotsGame/style/useStyles.js","modules/DotsGame/index.js","modules/DotsGame/DotsGame.js","components/Footer/style/useStyles.js","components/Footer/index.js","components/Footer/Footer.js","App/style/useStyles.js","App/App.js","App/index.js","index.js","services/Store/StoreProvider.js"],"names":["useStyles","makeStyles","theme","toolBar","justifyContent","textTransform","Header","React","memo","classes","AppBar","position","Toolbar","className","Typography","variant","styleBtnSumit","btnSubmit","width","marginTop","start","createMuiTheme","palette","secondary","main","connect","state","gameStartFlag","isSubmitEnabled","text","btnColor","ThemeProvider","Button","type","color","disabled","obj","Object","entries","length","constructor","addZero","i","currentdate","Date","month","Intl","DateTimeFormat","format","getHours","getMinutes","getDate","getFullYear","Store","getStore","getState","gameDificulty","dificultiesList","dificultySelected","field","delay","name","action","payload","dispatch","timeStartPlay","player","timeEndPlay","winnerFlag","timeScore","getTime","board","fields","fieldCounter","playerScore","pcScore","winnersList","event","nameOfDificulty","target","value","selectedDificulty","handleFormSubmit","e","preventDefault","styleConfigInputs","form","display","alignItems","formControl","margin","spacing","selectDificulty","playerNameInput","flexDirection","ConfigInputs","isObjEmpty","isEditInputsDisabled","useEffect","a","async","axios","result","data","console","error","setDificultyList","dificultiesName","keys","Box","onSubmit","FormControl","required","InputLabel","id","Select","labelId","onChange","handleSelectDificulty","map","MenuItem","key","string","charAt","toUpperCase","substring","replace","FormHelperText","TextField","label","handleSetPlayerName","helperText","inputProps","minLength","maxLength","SubmitBtn","infoTextStyle","root","marginBottom","InfoText","resultGameMsg","fieldChangeStatus","status","updatedFields","setBoardFields","fieldsSide","allFields","collector","push","catch","arr","_arr","j","Math","floor","random","arrayShuffle","fieldCounterIncrement","StyleCell","td","borderLeft","grey","borderTop","BoardCell","style","backgroundColor","blue","green","red","handleChangeStatus","onClick","tryToCatch","getWinnersListFromServer","list","reverse","winner","date","post","refreshWinnersListToStore","log","currentDate","getCurrentDate","postSendWinners","gameStop","setPlayerTimeScore","updateServerWinners","Board","height","gridTemplateColumns","gridTemplateRows","borderBottom","borderRight","boardSize","StyleBoard","fieldsLength","BuildBoard","delayInterval","halfOfBoardFields","ceil","handlerPlayerWin","handlerPlayerLoose","setInterval","clearInterval","boardCells","MainPanel","WinnersListStyle","title","textAlign","listWrapper","overflowY","maxWidth","paddingRight","WinnersList","winnersListStyle","InfoPanel","DotsGame","Container","Grid","container","item","xs","md","minHeight","Footer","currentYear","gameWrapper","flexGrow","App","CssBaseline","reducers","middleware","combined","combineReducers","applied","applyMiddleware","thunk","store","next","createStore","undefined","newStore","ReactDOM","render","children","document","getElementById"],"mappings":"kNASeA,EAPGC,aAAW,SAACC,GAAD,MAAY,CACvCC,QAAS,CACPC,eAAgB,SAChBC,cAAe,iBCHJC,ECIAC,IAAMC,MAAK,WACxB,IAAMC,EAAUT,IAChB,OACE,kBAACU,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,CAASC,UAAWJ,EAAQN,SAC1B,kBAACW,EAAA,EAAD,CAAYC,QAAS,MAArB,kB,iBCKOC,EAdOf,aAAW,SAACC,GAChC,MAAO,CACLe,UAAW,CACTC,MAAO,KAET,4BAA6B,CAC3BD,UAAW,CACTC,MAAO,IACPC,UAAW,SCTbC,EAAQ,Q,iBCSRlB,EAAQmB,YAAe,CAC3BC,QAAS,CACPC,UAAW,CACTC,KAAM,cAKGC,eAAQ,SAACC,GACtB,MAAO,CACLC,cAAeD,EAAMC,iBAFVF,CAKblB,IAAMC,MAAK,YAAwD,IAAnCmB,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,gBACvCnB,EAAUO,IAEZa,EAAO,OACPC,EAAW,UAOf,OALIH,IAAkBP,GD3Bb,SC2BsBO,IAC7BE,EAAO,aACPC,EAAW,aAIX,kBAACC,EAAA,EAAD,CAAe7B,MAAOA,GACpB,kBAAC8B,EAAA,EAAD,CACEnB,UAAWJ,EAAQQ,UACnBgB,KAAK,SACLlB,QAAQ,YACRmB,MAAOJ,EACPK,UAAWP,GAEVC,Q,QC3CI,eAACO,GACd,OAAsC,IAA/BC,OAAOC,QAAQF,GAAKG,QAAgBH,EAAII,cAAgBH,QCDjE,SAASI,EAAQC,GAIf,OAHIA,EAAI,KACNA,EAAI,IAAMA,GAELA,EAGM,iBACb,IAAMC,EAAc,IAAIC,KAElBC,EADiB,IAAIC,KAAKC,eAAe,QAAS,CAAEF,MAAO,SACpCG,OAAOL,GAapC,OAVEF,EAAQE,EAAYM,YACpB,IACAR,EAAQE,EAAYO,cACpB,KACAT,EAAQE,EAAYQ,WACpB,IACAN,EACA,IACAF,EAAYS,e,wBClBZC,EAAQ,KAYCC,EAAW,WACtB,OAAOD,GAGIE,EAAW,WACtB,OAAOF,EAAME,YCjBAC,ECEA,WAMT,IALJ9B,EAKG,uDALK,CACN+B,gBAAiB,GACjBC,kBAAmB,CAAEC,MAAO,GAAIC,MAAO,IAAMC,KAAM,eAErDC,EACG,uCACH,OAAQA,EAAO7B,MACb,ICb4B,0BDc1B,OAAO,eAAKP,EAAZ,CAAmB+B,gBAAgB,eAAMK,EAAOC,WAClD,ICd0B,wBDexB,OAAO,eAAKrC,EAAZ,CAAmBgC,kBAAmBI,EAAOC,UAC/C,QACE,OAAO,eAAKrC,KEfH,aACb4B,IAAWU,SAAS,CAClB/B,KCJwB,yBCEbN,ECIA,WAAmC,IAAlCD,EAAiC,uDAAzB,aAAcoC,EAAW,uCAC/C,OAAQA,EAAO7B,MACb,IFTyB,uBEUvB,OAAOb,EACT,IFVwB,sBEWtB,MXVO,OWWT,IFX0B,wBEYxB,MXda,aWef,QACE,OAAOM,ICbE,aAAO,IACZuC,EAAkBV,IAAWW,OAA7BD,cACAE,EAAgBZ,IAAWW,OAA3BC,YAEJA,EAAcF,GAChBX,IAAWU,SAAS,CAClB/B,KCJwB,wBDKxB8B,QAASI,EAAcF,KEEdC,ECDA,WAST,IARJxC,EAQG,uDARK,CACNmC,KAAM,GACNO,WAAY,KACZH,cAAe,EACfE,YAAa,EACbE,UAAW,MAEbP,EACG,uCACH,OAAQA,EAAO7B,MACb,IFtBoB,kBEuBlB,OAAO,eAAKP,EAAZ,CAAmBmC,KAAMC,EAAOC,UAClC,IFvBgC,8BEwB9B,OAAO,eAAKrC,EAAZ,CAAmB0C,YAAY,IACjC,IFxBiC,+BEyB/B,OAAO,eAAK1C,EAAZ,CAAmB0C,YAAY,IACjC,IFzB+B,6BE0B7B,OAAO,eAAK1C,EAAZ,CAAmBuC,eAAe,IAAIrB,MAAO0B,YAC/C,IF1B6B,2BE2B3B,OAAO,eAAK5C,EAAZ,CAAmByC,aAAa,IAAIvB,MAAO0B,YAC7C,IF3B0B,wBE4BxB,OAAO,eAAK5C,EAAZ,CAAmB2C,UAAWP,EAAOC,UACvC,IF5BsB,oBE6BpB,OAAO,eACFrC,EADL,CAEE0C,WAAY,KACZH,cAAe,EACfE,YAAa,EACbE,UAAW,OAEf,IFnCqB,mBEoCnB,MAAO,CACLR,KAAM,GACNO,WAAY,KACZH,cAAe,EACfE,YAAa,EACbE,UAAW,MAEf,QACE,OAAO,eAAK3C,KChDH,aACb4B,IAAWU,SAAS,CAClB/B,KCJkC,mCCEvB,WAAC8B,GACdT,IAAWU,SAAS,CAClB/B,KDLqB,mBCMrB8B,aCGWQ,ECDA,WAQT,IAPJ7C,EAOG,uDAPK,CACN8C,OAAQ,GACRC,aAAc,EACdC,YAAa,EACbC,QAAS,GAEXb,EACG,uCACH,OAAQA,EAAO7B,MACb,IHlBqB,mBGmBnB,OAAO,eAAKP,EAAZ,CAAmB8C,OAAQV,EAAOC,UACpC,IHnBkC,gCGoBhC,OAAO,eAAKrC,EAAZ,CAAmB+C,aAAc/C,EAAM+C,aAAe,IACxD,IHpBiC,+BGqB/B,OAAO,eAAK/C,EAAZ,CAAmBgD,YAAahD,EAAMgD,YAAc,IACtD,IHrB6B,2BGsB3B,OAAO,eAAKhD,EAAZ,CAAmBiD,QAASjD,EAAMiD,QAAU,IAC9C,IHtBgB,cGuBd,MAAO,CAAEH,OAAQ,GAAIC,aAAc,EAAGC,YAAa,EAAGC,QAAS,GACjE,QACE,OAAO,eAAKjD,KC3BHkD,ECAA,WAAyB,IAAxBlD,EAAuB,uDAAf,GAAIoC,EAAW,uCACrC,OAAQA,EAAO7B,MACb,ICJ0B,wBDKxB,OAAO6B,EAAOC,QAChB,QACE,OAAOrC,IEHE,WAACmD,GAAW,ICDXd,EDENpC,EAAkB4B,IAAlB5B,cACA8B,EAAoBF,IAAWC,cAA/BC,gBAEFqB,EAAkBD,EAAME,OAAOC,MAC/BC,EAAiB,eAClBxB,EAAgBoB,EAAME,OAAOC,OADX,CAErBnB,KAAMiB,IxBXS,ewBcbnD,ICXUoC,EDYQkB,ECXtB3B,IAAWU,SAAS,CAClB/B,KlBJ0B,wBkBK1B8B,c,kCCFW,WAACc,GAAW,ICDXd,E3BHG,e0BKSR,IAAlB5B,gBCFMoC,EDKEc,EAAME,OAAOC,MCJ7B1B,IAAWU,SAAS,CAClB/B,KdLoB,kBcMpB8B,cCqBWmB,EAfU,SAACtD,GAAD,OAAqB,SAACuD,GAC7CA,EAAEC,iBADiD,IAG3CzD,EAAkB4B,IAAlB5B,cAEJC,GCbJ0B,IAAWU,SAAS,CAClB/B,KpBLyB,yBmBoBvBN,IAAkBP,G5BlBX,S4BkBoBO,IEhB/B2B,IAAWU,SAAS,CAClB/B,KrBH0B,0BsBE5BqB,IAAWU,SAAS,CAClB/B,KdDgB,gBeAlBqB,IAAWU,SAAS,CAClB/B,KnBCsB,yB,+DoB2BXoD,GA/BWpF,aAAW,SAACC,GACpC,MAAO,CACLoF,KAAM,CACJC,QAAS,OACTC,WAAY,SACZpF,eAAgB,UAElBqF,YAAa,CACXC,OAAQxF,EAAMyF,QAAQ,IAExBC,gBAAiB,CACf1E,MAAO,KAET2E,gBAAiB,CACf3E,MAAO,KAET,4BAA6B,CAC3BoE,KAAM,CACJQ,cAAe,SACfN,WAAY,UAEdI,gBAAiB,CACf1E,MAAO,KAET2E,gBAAiB,CACf3E,MAAO,UCzBA6E,GCiBAtE,aAAQ,SAACC,GACtB,MAAO,CACL8B,cAAe9B,EAAM8B,cACrBU,OAAQxC,EAAMwC,OACdvC,cAAeD,EAAMC,iBAJVF,CAOblB,IAAMC,MAAK,YAIP,IAAD,IAHDgD,cAAiBC,EAGhB,EAHgBA,gBAAiBC,EAGjC,EAHiCA,kBAClCQ,EAEC,EAFDA,OACAvC,EACC,EADDA,cAEMlB,EAAU4E,KAEVzD,EACJsC,EAAOL,KAAKtB,OAAS,GACC,KAAtBmB,IACCsC,EAAWtC,GAERuC,EnCtCS,emCsCctE,EAE7BpB,IAAM2F,WAAU,YCrCL,SAAOrB,GAAP,QAAAsB,EAAAC,OAAA,2EAAAD,EAAA,MAEUE,IACnB,oEAHS,OAELC,EAFK,OCACvC,EDMSuC,EAAOC,KCL9BjD,IAAWU,SAAS,CAClB/B,K9BL4B,0B8BM5B8B,YDHW,gDAQXyC,QAAQC,MAAR,MARW,kCCAA,IAAC1C,IDAD,mBDsCT2C,KACC,IAEH,IAAMC,EAAkBtE,OAAOuE,KAAKnD,GAEpC,OACE,kBAACoD,EAAA,EAAD,KACIb,EAAWvC,GAiDT,KAhDF,0BACE5C,UAAWJ,EAAQ6E,KACnBwB,SAAU5B,EAAiBtD,IAE3B,kBAACmF,EAAA,EAAD,CACE5E,SAAU8D,EACVe,UAAQ,EACRnG,UAAWJ,EAAQgF,aAEnB,kBAACwB,EAAA,EAAD,CAAYC,GAAG,0BAAf,oBAGA,kBAACC,EAAA,EAAD,CACEC,QAAQ,yBACRF,GAAG,mBACHrG,UAAWJ,EAAQmF,gBACnBZ,MAAOtB,EAAkBG,KACzBwD,SAAUC,GAETX,EAAgBY,KAAI,SAAC1D,GACpB,OACE,kBAAC2D,EAAA,EAAD,CAAUC,IAAK5D,EAAMmB,MAAOnB,IGtEhC6D,EHuEuB7D,GGrE5B8D,OAAO,GAAGC,cACjBF,EAAOG,UAAU,GAAGC,QAAQ,iBAAkB,UAHnC,IAACJ,MH4EF,kBAACK,EAAA,EAAD,0BAGF,kBAACC,EAAA,EAAD,CACEnH,UAAWJ,EAAQoF,gBACnBoC,MAAM,cACNZ,SAAUa,EACVlD,MAAOd,EAAOL,KACdmD,UAAQ,EACR7E,SAAU8D,EACVkC,WAAW,gCACXC,WAAY,CACVC,UAAW,EACXC,UAAW,MAIf,kBAACvB,EAAA,EAAD,CAAalG,UAAWJ,EAAQgF,aAC9B,kBAAC8C,EAAD,CAAW3G,gBAAiBA,WIjF3B4G,GAXOvI,aAAW,SAACC,GAAD,MAAY,CAC3CuI,KAAM,CACJlD,QAAS,OACTnF,eAAgB,SAChBoF,WAAY,SACZrE,UAAW,GACXuH,aAAc,IAEhB7G,KAAM,OCRO8G,GCUAlH,aAAQ,SAACC,GACtB,MAAO,CACLC,cAAeD,EAAMC,cACrByC,WAAY1C,EAAMwC,OAAOE,cAHd3C,CAMblB,IAAMC,MAAK,YAAkD,IAA9BmB,EAA6B,EAA7BA,cAAeyC,EAAc,EAAdA,WACtC3D,EAAU+H,KACR3E,EAASN,IAAWW,OAApBL,KAEJhC,EAAO,GACP+G,EAAgB,GAQpB,QANmB,IAAfxE,EACFwE,EAAa,iBAAa/E,EAAb,gBACW,IAAfO,IACTwE,EAAa,iBAAa/E,EAAb,YAGPlC,GACN,IzChCa,ayCiCXE,EAAO,uBACP,MACF,KAAKT,EACHS,EAAO,yBACP,MACF,IzCpCO,OyCqCLA,EAAO+G,EACP,MACF,QACE/G,EAAO,GAEX,OACE,kBAACgF,EAAA,EAAD,CAAKhG,UAAWJ,EAAQgI,MACtB,kBAAC3H,EAAA,EAAD,CAAYD,UAAWJ,EAAQoB,KAAMd,QAAS,MAC3Cc,QC9BIgH,GAdW,SAAC3B,EAAI4B,GAAY,IAGnCC,EAFaxF,IAAWgB,MAAtBC,OAEqB+C,KAAI,SAAC5D,GAKhC,OAJIA,EAAMuD,KAAOA,GAAuB,YAAjBvD,EAAMmF,SAC3BnF,EAAMmF,OAASA,GAGVnF,KAGTqF,EAAeD,ICVF,cAKb,IAJA,IAAME,EAAa1F,IAAWC,cAAcE,kBAAkBC,MAExDuF,EAAYD,EAAaA,EACzBE,EAAY,GACTzG,EAAI,EAAGA,EAAIwG,EAAWxG,IAC7ByG,EAAUC,KAAK,CAAElC,GAAIxE,EAAGoG,OAAQ,WAAYO,MAAO,OAGrDL,ECba,SAAsBM,GAGnC,IAFA,IAAMC,EAAI,YAAOD,GAER5G,EAAI6G,EAAKhH,OAAS,EAAGG,EAAI,EAAGA,IAAK,CACxC,IAAM8G,EAAIC,KAAKC,MAAMD,KAAKE,UAAYjH,EAAI,IADF,EAEnB,CAAC6G,EAAKC,GAAID,EAAK7G,IAAnC6G,EAAK7G,GAFkC,KAE9B6G,EAAKC,GAFyB,KAK1C,OAAOD,EDKQK,CAAaT,KELf,YAACjC,GAAD,OAAQ,WAAO,IAAD,EACM3D,IAAWgB,MAApCE,EADmB,EACnBA,aAAcD,EADK,EACLA,OACd7C,EAAkB4B,IAAlB5B,cAER,GAAI8C,IAAiByC,GAAMvF,IAAkBP,EAAO,CAClD,IAAM2H,EAAgBvE,EAAO+C,KAAI,SAAC5D,GAKhC,OAJIA,EAAMuD,KAAOA,IACfvD,EAAMmF,OAAS,WAGVnF,KAGTqF,EAAeD,GACfc,IClBFvG,IAAWU,SAAS,CAClB/B,K7BHiC,oC,oB8BQtB6H,GAPG7J,aAAW,SAACC,GAAD,MAAY,CACvC6J,GAAI,CACFC,WAAW,aAAD,OAAeC,KAAK,MAC9BC,UAAU,aAAD,OAAeD,KAAK,W,4DCElB,SAASE,GAAT,GAAoC,IAAfjD,EAAc,EAAdA,GAAI4B,EAAU,EAAVA,OAChCrI,EAAUqJ,KAgBhB,OACE,kBAACjD,EAAA,EAAD,CACEuD,MAAO,CAAEC,gBAhBc,WACzB,OAAQvB,GACN,IAAK,SACH,OAAOwB,KAAK,KACd,IAAK,UACH,OAAOC,KAAM,KACf,IAAK,OACH,OAAOC,KAAI,KACb,IAAK,WACL,QACE,MAAO,SAMiBC,IAC1B5J,UAAWJ,EAAQsJ,GACnBW,QAASC,GAAWzD,KC1BX,ICDA,6BAAAf,EAAAC,OAAA,2EAAAD,EAAA,MAEUE,IACnB,8DAHS,cAELC,EAFK,yBAKJA,EAAOC,MALH,gCAOXC,QAAQC,MAAM,QAAd,MAPW,yDCCA,6BAAAN,EAAAC,OAAA,kEAAAD,EAAA,MACMyE,MADN,QACPC,EADO,QAERC,UCFS/G,EDIC8G,ECHfvH,IAAWU,SAAS,CAClB/B,K7BL0B,wB6BM1B8B,YDHW,iCCAA,IAACA,MCAD,YAAOgH,EAAQC,GAAf,SAAA7E,EAAAC,OAAA,2EAAAD,EAAA,MAELE,IAAM4E,KACV,4DACA,CACEF,SACAC,UANO,OASXE,KATW,+CAWX1E,QAAQ2E,IAAI,4BAAZ,MAXW,wDCCA,mCAAAhF,EAAAC,OAAA,kDACgB7C,IAAWW,OAAhCL,EADK,EACLA,KAAMO,EADD,EACCA,WACRgH,EAAcC,KAED,IAAfjH,GACFkH,GAAgBzH,EAAMuH,IAEL,IAAfhH,GACFkH,GAAgB,WAAYF,GARjB,sCCIA,cACbG,ICLAjI,IAAWU,SAAS,CAClB/B,K3CD6B,6B4CA/BqB,IAAWU,SAAS,CAClB/B,K5CJgC,gC0CWlCuJ,IACAC,MGTa,cACbF,ICDAjI,IAAWU,SAAS,CAClB/B,K9CHiC,iC6CKnCwJ,MELaC,GCoBAjK,aAAQ,SAACC,GACtB,MAAO,CACLgC,kBAAmBhC,EAAM8B,cAAcE,kBACvC/B,cAAeD,EAAMC,cACrB6C,OAAQ9C,EAAM6C,MAAMC,OACpBC,aAAc/C,EAAM6C,MAAME,gBALfhD,EAOZ,YAAyD,IAAxCE,EAAuC,EAAvCA,cAAe6C,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,aACnChE,EC1BO,WAAO,IAEGkD,EACnBJ,IAAWC,cADbE,kBAAqBC,MAiCvB,OA3BmB1D,aAAW,SAACC,GAAD,MAAY,CACxCuI,KAAM,CACJ/C,OAAQ,OACRxE,MANc,IAOdyK,OAPc,KAShBpH,MAAO,CACLgB,QAAS,OACTqG,oBAAoB,UAAD,OAAYjI,EAAZ,UACnBvD,eAAgB,SAChByL,iBAAiB,UAAD,OAAYlI,EAAZ,aAbF,IAaoCA,EAAlC,OAChB6B,WAAY,UACZsG,aAAa,aAAD,OAAe7B,KAAK,MAChC8B,YAAY,aAAD,OAAe9B,KAAK,OAEjC,4BAA6B,CAC3BxB,KAAM,CACJvH,MAAO8K,IACPL,OAAQK,KAEVzH,MAAO,CACLsH,iBAAiB,UAAD,OAAYlI,EAAZ,aAAuBqI,IACrCrI,EADc,aDHNsI,KACRvI,EAAsBH,IAAWC,cAAjCE,kBAFiD,EAGxBH,IAAWgB,MAApCG,EAHiD,EAGjDA,YAAaC,EAHoC,EAGpCA,QACbN,EAAcd,IAAWW,OAAzBG,UACF6H,EAAe1H,EAAOjC,OACtBqB,EAAQF,EAAkBE,MAGhCrD,IAAM2F,WAAU,WACTF,EAAWtC,I7DvCD,e6DuCuB/B,GACpCwK,OAED,CAACzI,EAAmB/B,IAGvBpB,IAAM2F,WAAU,WACVvE,IAAkBP,GE1CxBkC,IAAWU,SAAS,CAClB/B,KlDF+B,iCgD8C9B,CAACN,IAGJpB,IAAM2F,WAAU,WACd,IAAIkG,EACEC,EAAoB5C,KAAK6C,KAAKJ,EAAe,GAoBnD,OAlBIvK,IAAkBP,IAChBsD,EAAc2H,GAAqBA,EAAoB,EACzDE,KACS5H,EAAU0H,GAAqBA,EAAoB,GAC5DG,KACA3D,GAAkBpE,EAAc,aACvBA,GAAgByH,IACzBrD,GAAkBpE,EAAc,UAEhC2H,EAAgBK,aAAY,WAC1B5D,GAAkBpE,EAAc,QAChCoF,IG/DRvG,IAAWU,SAAS,CAClB/B,K/CF6B,+B4CkEtB2B,GAAS,OAKT,WACL8I,cAAcN,MAEf,CACDxI,EACAa,EACAyH,EACAvK,EACAgD,EACAD,EACAL,IAIF,IADA,IAAMsI,EAAa,GACVjK,EAAI,EAAGA,EAAI8B,EAAOjC,OAAQG,IACjCiK,EAAWvD,KACT,kBAACe,GAAD,CACE1C,IAAKjD,EAAO9B,GAAGwE,GACfA,GAAI1C,EAAO9B,GAAGwE,GACd4B,OAAQtE,EAAO9B,GAAGoG,OAClBrE,aAAcA,KAKpB,OACE,kBAACoC,EAAA,EAAD,CAAKhG,UAAWJ,EAAQgI,MACtB,kBAAC5B,EAAA,EAAD,CAAKhG,UAAWJ,EAAQ8D,OAAQoI,OInGvBC,OCIA,WACb,OACE,kBAAC/F,EAAA,EAAD,KACE,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,QCLA7G,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCuI,KAAM,CACJlD,QAAS,OACTnF,eAAgB,gBAChB0L,aAAa,aAAD,OAAe7B,KAAK,MAChC9I,UAAW,QAIAZ,OAAMC,MAAK,YAAiC,IAAfqD,EAAc,EAAdA,KAAMmH,EAAQ,EAARA,KAC1CvK,EAAUT,KAChB,OACE,kBAAC6G,EAAA,EAAD,CAAKhG,UAAWJ,EAAQgI,MACtB,kBAAC3H,EAAA,EAAD,CAAYC,QAAS,aAAc8C,GACnC,kBAAC/C,EAAA,EAAD,CAAYC,QAAS,aAAciK,OCE1B6B,GApBU5M,aAAW,SAACC,GAAD,MAAY,CAC9CuI,KAAM,GACNqE,MAAO,CACLC,UAAW,SACXrE,aAAc,IAEhBsE,YAAa,CACXC,UAAW,OACXtB,OAAQ,IACRuB,SAAU,IACVxH,OAAQ,SACRyH,aAAc,IAEhB,4BAA6B,CAC3BH,YAAa,CACXrB,OAAQ,UCfCyB,GCMA3L,aAAQ,SAACC,GACtB,MAAO,CACLC,cAAeD,EAAMC,cACrBiD,YAAalD,EAAMkD,eAHRnD,CAMblB,IAAMC,MAAK,YAAsD,IAA/BmB,EAA8B,EAA9BA,cAAeiD,EAAe,EAAfA,YACzCnE,EAAU4M,KAMhB,OAJA9M,IAAM2F,WAAU,WACdgF,OACC,CAACvJ,IAGF,kBAACkF,EAAA,EAAD,CAAKhG,UAAWJ,EAAQgI,MACtB,kBAAC3H,EAAA,EAAD,CAAYD,UAAWJ,EAAQqM,MAAO/L,QAAS,MAA/C,gBAGA,kBAAC8F,EAAA,EAAD,CAAKhG,UAAWJ,EAAQuM,aACrBpI,EAAY2C,KAAI,SAACwD,GAChB,OACE,kBAAC,GAAD,CAAQtD,IAAKsD,EAAO7D,GAAIrD,KAAMkH,EAAOA,OAAQC,KAAMD,EAAOC,gBCxBlEhL,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCuI,KAAM,CACJ/C,OAAQ,QCLG4H,GDSA/M,IAAMC,MAAK,WACxB,IAAMC,EAAUT,KAChB,OACE,kBAAC6G,EAAA,EAAD,CAAKhG,UAAWJ,EAAQgI,MACtB,kBAAC,GAAD,U,oBENSzI,GAPGC,aAAW,SAACC,GAAD,MAAY,CACvCuI,KAAM,CACJkD,OAAQ,OACRxK,UAAW,QCHAoM,OCKA,WACb,IAAM9M,EAAUT,KAEhB,OACE,kBAACwN,GAAA,EAAD,CAAW3M,UAAWJ,EAAQgI,MAC5B,kBAACgF,GAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAAC,GAAD,OAEF,kBAACJ,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAAC,GAAD,UCCK7N,GAfGC,aAAW,SAACC,GAAD,MAAY,CACvCuI,KAAM,CACJlD,QAAS,OACTC,WAAY,SACZpF,eAAgB,SAChB0N,UAAW,GACXzD,gBAAiBJ,KAAK,MAGxB9J,QAAS,CACPC,eAAgB,SAChBC,cAAe,iBCZJ0N,GCGAxN,IAAMC,MAAK,WACxB,IAAMC,EAAUT,KACVgO,GAAc,IAAIpL,MAAOQ,cAC/B,OACE,kBAACyD,EAAA,EAAD,CAAKhG,UAAWJ,EAAQgI,MACtB,kBAAC3H,EAAA,EAAD,CAAYC,QAAS,aAArB,OAAoCiN,O,UCG3BhO,I,OAXGC,aAAW,SAACC,GAAD,MAAY,CACvCuI,KAAM,CACJlD,QAAS,OACTO,cAAe,SACf6F,OAAQ,QAEVsC,YAAa,CACXC,SAAU,Q,OCgBCC,ICvBAA,GDQf,WACE,IAAM1N,EAAUT,KAChB,OACE,kBAAC6G,EAAA,EAAD,CAAKhG,UAAWJ,EAAQgI,MACtB,kBAAC2F,GAAA,EAAD,MAEA,kBAAC,EAAD,MACA,kBAACvH,EAAA,EAAD,CAAKhG,UAAWJ,EAAQwN,aACtB,kBAAC,GAAD,OAEF,kBAAC,GAAD,S5EfkB,WAAgC,IAA/BI,EAA8B,uDAAnB,GAAIC,EAAe,uCAC/CC,EAAWC,YAAgBH,GAC3BI,EAAUC,YACdC,IACCL,GAAa,SAACM,GAAD,OAAW,SAACC,GAAD,OAAU,SAAC/K,GAAD,OAAY+K,EAAK/K,OAG9CT,EAAQyL,YAAYP,OAAUQ,EAAWN,G8ECnDO,CAAS,CAAExL,gBAAe7B,gBAAeuC,SAAQK,QAAOK,gBAExDqK,IAASC,OACP,mBCZa,gBAAGC,EAAH,EAAGA,SAAH,OACb,kBAAC,IAAD,CAAUP,MAAOtL,KAAa6L,KDW9B,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.0887e09f.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  toolBar: {\n    justifyContent: 'center',\n    textTransform: 'uppercase'\n  }\n}));\n\nexport default useStyles;\n","import Header from './Header';\n\nexport default Header;\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport useStyles from './style/useStyles';\n\nexport default React.memo(function Header() {\n  const classes = useStyles();\n  return (\n    <AppBar position='static'>\n      <Toolbar className={classes.toolBar}>\n        <Typography variant={'h5'}>Dots Game</Typography>\n      </Toolbar>\n    </AppBar>\n  );\n});\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst styleBtnSumit = makeStyles((theme) => {\n  return {\n    btnSubmit: {\n      width: 120\n    },\n    '@media (max-width: 599px)': {\n      btnSubmit: {\n        width: 250,\n        marginTop: 15\n      }\n    }\n  };\n});\n\nexport default styleBtnSumit;\n","const notstarted = 'notstarted';\nconst start = 'start';\nconst stop = 'stop';\n\nexport { notstarted, start, stop };\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport styleBtnSumit from './style/styleBtnSumit';\nimport {\n  start,\n  stop\n} from 'services/Store/reducers/gameStartFlag/gameStartFlagOptions';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    secondary: {\n      main: '#ad1457'\n    }\n  }\n});\n\nexport default connect((state) => {\n  return {\n    gameStartFlag: state.gameStartFlag\n  };\n})(\n  React.memo(function submitBtn({ gameStartFlag, isSubmitEnabled }) {\n    const classes = styleBtnSumit();\n\n    let text = 'play';\n    let btnColor = 'primary';\n\n    if (gameStartFlag === start || gameStartFlag === stop) {\n      text = 'play again';\n      btnColor = 'secondary';\n    }\n\n    return (\n      <ThemeProvider theme={theme}>\n        <Button\n          className={classes.btnSubmit}\n          type='submit'\n          variant='contained'\n          color={btnColor}\n          disabled={!isSubmitEnabled}\n        >\n          {text}\n        </Button>\n      </ThemeProvider>\n    );\n  })\n);\n","export default (obj) => {\n  return Object.entries(obj).length === 0 && obj.constructor === Object;\n};\n","function addZero(i) {\n  if (i < 10) {\n    i = '0' + i;\n  }\n  return i;\n}\n\nexport default () => {\n  const currentdate = new Date();\n  const monthFormatter = new Intl.DateTimeFormat('en-US', { month: 'long' });\n  const month = monthFormatter.format(currentdate);\n\n  const datetime =\n    addZero(currentdate.getHours()) +\n    ':' +\n    addZero(currentdate.getMinutes()) +\n    '; ' +\n    addZero(currentdate.getDate()) +\n    ' ' +\n    month +\n    ' ' +\n    currentdate.getFullYear();\n\n  return datetime;\n};\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nlet Store = null;\n\nexport const newStore = (reducers = {}, middleware) => {\n  const combined = combineReducers(reducers);\n  const applied = applyMiddleware(\n    thunk,\n    !middleware ? (store) => (next) => (action) => next(action) : middleware\n  );\n\n  return (Store = createStore(combined, undefined, applied));\n};\n\nexport const getStore = () => {\n  return Store;\n};\n\nexport const getState = () => {\n  return Store.getState();\n};\n","import gameDificulty from './gameDificulty';\nimport { chooseGameDificulty, setGameDificultyList } from './actions';\n\nexport default gameDificulty;\n\nexport { chooseGameDificulty, setGameDificultyList };\n","import {\n  GAME_DIFICULTY_LIST_SET,\n  GAME_DIFICULTY_CHOOSE\n} from './actions/actionTypes';\n\nexport default (\n  state = {\n    dificultiesList: {},\n    dificultySelected: { field: 10, delay: 1000, name: 'normalMode' }\n  },\n  action\n) => {\n  switch (action.type) {\n    case GAME_DIFICULTY_LIST_SET:\n      return { ...state, dificultiesList: { ...action.payload } };\n    case GAME_DIFICULTY_CHOOSE:\n      return { ...state, dificultySelected: action.payload };\n    default:\n      return { ...state };\n  }\n};\n","const GAME_DIFICULTY_LIST_SET = 'GAME_DIFICULTY_LIST_SET';\nconst GAME_DIFICULTY_CHOOSE = 'GAME_DIFICULTY_CHOOSE';\n\nexport { GAME_DIFICULTY_LIST_SET, GAME_DIFICULTY_CHOOSE };\n","import { getStore } from 'services/Store';\nimport { GAME_START_SET_STOP } from './actionTypes';\n\nexport default () => {\n  getStore().dispatch({\n    type: GAME_START_SET_STOP\n  });\n};\n","const GAME_START_SET_START = 'GAME_START_SET_START';\nconst GAME_START_SET_STOP = 'GAME_START_SET_STOP';\nconst GAME_START_FLAG_RESET = 'GAME_START_FLAG_RESET';\n\nexport { GAME_START_SET_START, GAME_START_SET_STOP, GAME_START_FLAG_RESET };\n","import gameStartFlag from './gameStartFlag';\nimport { gameStart, gameStop, gameStartFlagReset } from './actions';\n\nexport default gameStartFlag;\n\nexport { gameStart, gameStop, gameStartFlagReset };\n","import {\n  GAME_START_SET_START,\n  GAME_START_SET_STOP,\n  GAME_START_FLAG_RESET\n} from './actions/actionTypes';\nimport { notstarted, start, stop } from './gameStartFlagOptions';\n\nexport default (state = 'notstarted', action) => {\n  switch (action.type) {\n    case GAME_START_SET_START:\n      return start;\n    case GAME_START_SET_STOP:\n      return stop;\n    case GAME_START_FLAG_RESET:\n      return notstarted;\n    default:\n      return state;\n  }\n};\n","import { getStore, getState } from 'services/Store';\nimport { PLAYER_SET_TIME_SCORE } from './actionTypes';\n\nexport default () => {\n  const { timeStartPlay } = getState().player;\n  const { timeEndPlay } = getState().player;\n\n  if (timeEndPlay > timeStartPlay) {\n    getStore().dispatch({\n      type: PLAYER_SET_TIME_SCORE,\n      payload: timeEndPlay - timeStartPlay\n    });\n  }\n};\n","const PLAYER_NAME_SET = 'PLAYER_NAME_SET';\nconst PLAYER_SET_WINNER_FLAG_TRUE = 'PLAYER_SET_WINNER_FLAG_TRUE';\nconst PLAYER_SET_WINNER_FLAG_FALSE = 'PLAYER_SET_WINNER_FLAG_FALSE';\nconst PLAYER_SET_TIME_START_PLAY = 'PLAYER_SET_TIME_START_PLAY';\nconst PLAYER_SET_TIME_END_PLAY = 'PLAYER_SET_TIME_END_PLAY';\nconst PLAYER_SET_TIME_SCORE = 'PLAYER_SET_TIME_SCORE';\nconst PLAYER_RESET_GAME = 'PLAYER_RESET_GAME';\nconst PLAYER_RESET_ALL = 'PLAYER_RESET_ALL';\n\nexport {\n  PLAYER_NAME_SET,\n  PLAYER_SET_WINNER_FLAG_TRUE,\n  PLAYER_SET_WINNER_FLAG_FALSE,\n  PLAYER_SET_TIME_START_PLAY,\n  PLAYER_SET_TIME_END_PLAY,\n  PLAYER_SET_TIME_SCORE,\n  PLAYER_RESET_GAME,\n  PLAYER_RESET_ALL\n};\n","import player from './player';\nimport {\n  setPlayerName,\n  setPlayerWin,\n  setPlayerLoose,\n  setPlayerTimeStartPlay,\n  setPlayerTimeEndPlay,\n  setPlayerTimeScore,\n  playerReset,\n  playerResetGame\n} from './actions';\n\nexport default player;\n\nexport {\n  setPlayerName,\n  setPlayerWin,\n  setPlayerLoose,\n  setPlayerTimeStartPlay,\n  setPlayerTimeEndPlay,\n  setPlayerTimeScore,\n  playerReset,\n  playerResetGame\n};\n","import {\n  PLAYER_NAME_SET,\n  PLAYER_SET_WINNER_FLAG_TRUE,\n  PLAYER_SET_WINNER_FLAG_FALSE,\n  PLAYER_SET_TIME_START_PLAY,\n  PLAYER_SET_TIME_END_PLAY,\n  PLAYER_SET_TIME_SCORE,\n  PLAYER_RESET_GAME,\n  PLAYER_RESET_ALL\n} from './actions/actionTypes';\n\nexport default (\n  state = {\n    name: '',\n    winnerFlag: null,\n    timeStartPlay: 0,\n    timeEndPlay: 0,\n    timeScore: null\n  },\n  action\n) => {\n  switch (action.type) {\n    case PLAYER_NAME_SET:\n      return { ...state, name: action.payload };\n    case PLAYER_SET_WINNER_FLAG_TRUE:\n      return { ...state, winnerFlag: true };\n    case PLAYER_SET_WINNER_FLAG_FALSE:\n      return { ...state, winnerFlag: false };\n    case PLAYER_SET_TIME_START_PLAY:\n      return { ...state, timeStartPlay: new Date().getTime() };\n    case PLAYER_SET_TIME_END_PLAY:\n      return { ...state, timeEndPlay: new Date().getTime() };\n    case PLAYER_SET_TIME_SCORE:\n      return { ...state, timeScore: action.payload };\n    case PLAYER_RESET_GAME:\n      return {\n        ...state,\n        winnerFlag: null,\n        timeStartPlay: 0,\n        timeEndPlay: 0,\n        timeScore: null\n      };\n    case PLAYER_RESET_ALL:\n      return {\n        name: '',\n        winnerFlag: null,\n        timeStartPlay: 0,\n        timeEndPlay: 0,\n        timeScore: null\n      };\n    default:\n      return { ...state };\n  }\n};\n","import { getStore } from 'services/Store';\nimport { BOARD_FIELD_COUNTER_INCREMENT } from './actionTypes';\n\nexport default () => {\n  getStore().dispatch({\n    type: BOARD_FIELD_COUNTER_INCREMENT\n  });\n};\n","const SET_BOARD_FIELDS = 'SET_BOARD_FIELDS';\nconst BOARD_FIELD_COUNTER_INCREMENT = 'BOARD_FIELD_COUNTER_INCREMENT';\nconst BOARD_PLAYER_SCORE_INCREMENT = 'BOARD_PLAYER_SCORE_INCREMENT';\nconst BOARD_PC_SCORE_INCREMENT = 'BOARD_PC_SCORE_INCREMENT';\nconst BOARD_RESET = 'BOARD_RESET';\n\nexport {\n  SET_BOARD_FIELDS,\n  BOARD_FIELD_COUNTER_INCREMENT,\n  BOARD_PLAYER_SCORE_INCREMENT,\n  BOARD_PC_SCORE_INCREMENT,\n  BOARD_RESET\n};\n","import { getStore } from 'services/Store';\nimport { SET_BOARD_FIELDS } from './actionTypes';\n\nexport default (payload) => {\n  getStore().dispatch({\n    type: SET_BOARD_FIELDS,\n    payload\n  });\n};\n","import board from './board';\nimport {\n  pcScoreIncrement,\n  playerScoreIncrement,\n  fieldCounterIncrement,\n  setBoardFields,\n  boardReset\n} from './actions';\n\nexport default board;\n\nexport {\n  pcScoreIncrement,\n  playerScoreIncrement,\n  fieldCounterIncrement,\n  setBoardFields,\n  boardReset\n};\n","import {\n  SET_BOARD_FIELDS,\n  BOARD_FIELD_COUNTER_INCREMENT,\n  BOARD_PLAYER_SCORE_INCREMENT,\n  BOARD_PC_SCORE_INCREMENT,\n  BOARD_RESET\n} from './actions/actionTypes';\n\nexport default (\n  state = {\n    fields: [],\n    fieldCounter: 0,\n    playerScore: 0,\n    pcScore: 0\n  },\n  action\n) => {\n  switch (action.type) {\n    case SET_BOARD_FIELDS:\n      return { ...state, fields: action.payload };\n    case BOARD_FIELD_COUNTER_INCREMENT:\n      return { ...state, fieldCounter: state.fieldCounter + 1 };\n    case BOARD_PLAYER_SCORE_INCREMENT:\n      return { ...state, playerScore: state.playerScore + 1 };\n    case BOARD_PC_SCORE_INCREMENT:\n      return { ...state, pcScore: state.pcScore + 1 };\n    case BOARD_RESET:\n      return { fields: [], fieldCounter: 0, playerScore: 0, pcScore: 0 };\n    default:\n      return { ...state };\n  }\n};\n","import winnersList from './winnersList';\n\nexport default winnersList;\n","import { WINNERS_LIST_SET_LIST } from './actions';\n\nexport default (state = [], action) => {\n  switch (action.type) {\n    case WINNERS_LIST_SET_LIST:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","const WINNERS_LIST_SET_LIST = 'WINNERS_LIST_SET_LIST';\n\nexport { WINNERS_LIST_SET_LIST };\n","import { getState } from 'services/Store';\nimport { notstarted } from 'services/Store/reducers/gameStartFlag/gameStartFlagOptions';\nimport { chooseGameDificulty } from 'services/Store/reducers/gameDificulty';\n\nexport default (event) => {\n  const { gameStartFlag } = getState();\n  const { dificultiesList } = getState().gameDificulty;\n\n  const nameOfDificulty = event.target.value;\n  const selectedDificulty = {\n    ...dificultiesList[event.target.value],\n    name: nameOfDificulty\n  };\n\n  if (gameStartFlag === notstarted) {\n    chooseGameDificulty(selectedDificulty);\n  }\n};\n","import { getStore } from 'services/Store';\nimport { GAME_DIFICULTY_CHOOSE } from './actionTypes';\n\nexport default (payload) => {\n  getStore().dispatch({\n    type: GAME_DIFICULTY_CHOOSE,\n    payload\n  });\n};\n","import { getState } from 'services/Store';\nimport { setPlayerName } from 'services/Store/reducers/player';\nimport { notstarted } from 'services/Store/reducers/gameStartFlag/gameStartFlagOptions';\n\nexport default (event) => {\n  const { gameStartFlag } = getState();\n\n  if (gameStartFlag === notstarted) {\n    setPlayerName(event.target.value);\n  }\n};\n","import { getStore } from 'services/Store';\nimport { PLAYER_NAME_SET } from './actionTypes';\n\nexport default (payload) => {\n  getStore().dispatch({\n    type: PLAYER_NAME_SET,\n    payload\n  });\n};\n","import { getState } from 'services/Store';\nimport {\n  gameStart,\n  gameStartFlagReset\n} from 'services/Store/reducers/gameStartFlag';\nimport {\n  start,\n  stop\n} from 'services/Store/reducers/gameStartFlag/gameStartFlagOptions';\nimport { boardReset } from 'services/Store/reducers/board';\nimport { playerResetGame } from 'services/Store/reducers/player';\n\nconst handleFormSubmit = (isSubmitEnabled) => (e) => {\n  e.preventDefault();\n\n  const { gameStartFlag } = getState();\n\n  if (isSubmitEnabled) {\n    gameStart();\n  }\n  if (gameStartFlag === start || gameStartFlag === stop) {\n    gameStartFlagReset();\n    boardReset();\n    playerResetGame();\n  }\n};\n\nexport default handleFormSubmit;\n","import { getStore } from 'services/Store';\nimport { GAME_START_SET_START } from './actionTypes';\n\nexport default () => {\n  getStore().dispatch({\n    type: GAME_START_SET_START\n  });\n};\n","import { getStore } from 'services/Store';\nimport { GAME_START_FLAG_RESET } from './actionTypes';\n\nexport default () => {\n  getStore().dispatch({\n    type: GAME_START_FLAG_RESET\n  });\n};\n","import { getStore } from 'services/Store';\nimport { BOARD_RESET } from './actionTypes';\n\nexport default () => {\n  getStore().dispatch({\n    type: BOARD_RESET\n  });\n};\n","import { getStore } from 'services/Store';\nimport { PLAYER_RESET_GAME } from './actionTypes';\n\nexport default () => {\n  getStore().dispatch({\n    type: PLAYER_RESET_GAME\n  });\n};\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst styleConfigInputs = makeStyles((theme) => {\n  return {\n    form: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    formControl: {\n      margin: theme.spacing(1)\n    },\n    selectDificulty: {\n      width: 180\n    },\n    playerNameInput: {\n      width: 180\n    },\n    '@media (max-width: 599px)': {\n      form: {\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      selectDificulty: {\n        width: 250\n      },\n      playerNameInput: {\n        width: 250\n      }\n    }\n  };\n});\n\nexport default styleConfigInputs;\n","import ConfigInputs from './ConfigInputs';\n\nexport default ConfigInputs;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport SubmitBtn from './SubmitBtn';\nimport { isObjEmpty } from 'utils';\nimport handleSelectDificulty from './functions/handleSelectDificulty';\nimport setDificultyList from './functions/setDificultyList';\nimport handleSetPlayerName from './functions/handleSetPlayerName';\nimport handleFormSubmit from './functions/handleFormSubmit';\nimport stringFormatter from './functions/stringFormatter';\nimport { notstarted } from 'services/Store/reducers/gameStartFlag/gameStartFlagOptions';\nimport Box from '@material-ui/core/Box';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport TextField from '@material-ui/core/TextField';\nimport styleConfigInputs from './style/styleConfigInputs';\n\nexport default connect((state) => {\n  return {\n    gameDificulty: state.gameDificulty,\n    player: state.player,\n    gameStartFlag: state.gameStartFlag\n  };\n})(\n  React.memo(function ConfigInputs({\n    gameDificulty: { dificultiesList, dificultySelected },\n    player,\n    gameStartFlag\n  }) {\n    const classes = styleConfigInputs();\n\n    const isSubmitEnabled =\n      player.name.length > 3 &&\n      dificultySelected !== '' &&\n      !isObjEmpty(dificultySelected);\n\n    const isEditInputsDisabled = gameStartFlag !== notstarted;\n\n    React.useEffect(() => {\n      setDificultyList();\n    }, []);\n\n    const dificultiesName = Object.keys(dificultiesList);\n\n    return (\n      <Box>\n        {!isObjEmpty(dificultiesList) ? (\n          <form\n            className={classes.form}\n            onSubmit={handleFormSubmit(isSubmitEnabled)}\n          >\n            <FormControl\n              disabled={isEditInputsDisabled}\n              required\n              className={classes.formControl}\n            >\n              <InputLabel id='dificulty-select-label'>\n                Select Dificulty\n              </InputLabel>\n              <Select\n                labelId='dificulty-select-label'\n                id='dificulty-select'\n                className={classes.selectDificulty}\n                value={dificultySelected.name}\n                onChange={handleSelectDificulty}\n              >\n                {dificultiesName.map((name) => {\n                  return (\n                    <MenuItem key={name} value={name}>\n                      {stringFormatter(name)}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n              <FormHelperText>choose dificulty</FormHelperText>\n            </FormControl>\n\n            <TextField\n              className={classes.playerNameInput}\n              label='Player Name'\n              onChange={handleSetPlayerName}\n              value={player.name}\n              required\n              disabled={isEditInputsDisabled}\n              helperText='must be at least 4 characters'\n              inputProps={{\n                minLength: 4,\n                maxLength: 20\n              }}\n            />\n\n            <FormControl className={classes.formControl}>\n              <SubmitBtn isSubmitEnabled={isSubmitEnabled} />\n            </FormControl>\n          </form>\n        ) : null}\n      </Box>\n    );\n  })\n);\n","import { setGameDificultyList } from 'services/Store/reducers/gameDificulty';\nimport axios from 'axios';\n\nexport default async (event) => {\n  try {\n    const result = await axios(\n      'https://starnavi-frontend-test-task.herokuapp.com/game-settings'\n    );\n\n    setGameDificultyList(result.data);\n  } catch (error) {\n    console.error(error);\n  }\n};\n","import { getStore } from 'services/Store';\nimport { GAME_DIFICULTY_LIST_SET } from './actionTypes';\n\nexport default (payload) => {\n  getStore().dispatch({\n    type: GAME_DIFICULTY_LIST_SET,\n    payload\n  });\n};\n","export default (string) => {\n  return (\n    string.charAt(0).toUpperCase() +\n    string.substring(1).replace(/([a-z])([A-Z])/, '$1 $2')\n  );\n};\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst infoTextStyle = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 30,\n    marginBottom: 30\n  },\n  text: {}\n}));\n\nexport default infoTextStyle;\n","import InfoText from './InfoText';\n\nexport default InfoText;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { getState } from 'services/Store';\nimport {\n  notstarted,\n  start,\n  stop\n} from 'services/Store/reducers/gameStartFlag/gameStartFlagOptions';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport { infoTextStyle } from './style';\n\nexport default connect((state) => {\n  return {\n    gameStartFlag: state.gameStartFlag,\n    winnerFlag: state.player.winnerFlag\n  };\n})(\n  React.memo(function InfoText({ gameStartFlag, winnerFlag }) {\n    const classes = infoTextStyle();\n    const { name } = getState().player;\n\n    let text = '';\n    let resultGameMsg = '';\n\n    if (winnerFlag === true) {\n      resultGameMsg = `Player ${name} is winner!`;\n    } else if (winnerFlag === false) {\n      resultGameMsg = `Player ${name} loose.`;\n    }\n\n    switch (gameStartFlag) {\n      case notstarted:\n        text = 'Welcome to our Game!';\n        break;\n      case start:\n        text = 'Press on blue squares.';\n        break;\n      case stop:\n        text = resultGameMsg;\n        break;\n      default:\n        text = '';\n    }\n    return (\n      <Box className={classes.root}>\n        <Typography className={classes.text} variant={'h5'}>\n          {text}\n        </Typography>\n      </Box>\n    );\n  })\n);\n","import { getState } from 'services/Store';\nimport { setBoardFields } from 'services/Store/reducers/board';\n\nconst fieldChangeStatus = (id, status) => {\n  const { fields } = getState().board;\n\n  const updatedFields = fields.map((field) => {\n    if (field.id === id && field.status !== 'success') {\n      field.status = status;\n    }\n\n    return field;\n  });\n\n  setBoardFields(updatedFields);\n};\n\nexport default fieldChangeStatus;\n","import { getState } from 'services/Store';\nimport { arrayShuffle } from 'utils';\nimport { setBoardFields } from 'services/Store/reducers/board';\n\nexport default () => {\n  const fieldsSide = getState().gameDificulty.dificultySelected.field;\n\n  const allFields = fieldsSide * fieldsSide;\n  const collector = [];\n  for (let i = 0; i < allFields; i++) {\n    collector.push({ id: i, status: 'inactive', catch: null });\n  }\n\n  setBoardFields(arrayShuffle(collector));\n};\n","export default function arrayShuffle(arr) {\n  const _arr = [...arr];\n\n  for (let i = _arr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [_arr[i], _arr[j]] = [_arr[j], _arr[i]];\n  }\n\n  return _arr;\n}\n","import { getState } from 'services/Store';\nimport {\n  fieldCounterIncrement,\n  playerScoreIncrement\n} from 'services/Store/reducers/board';\nimport { start } from 'services/Store/reducers/gameStartFlag/gameStartFlagOptions';\nimport { setBoardFields } from 'services/Store/reducers/board';\n\nexport default (id) => () => {\n  const { fieldCounter, fields } = getState().board;\n  const { gameStartFlag } = getState();\n\n  if (fieldCounter === id && gameStartFlag === start) {\n    const updatedFields = fields.map((field) => {\n      if (field.id === id) {\n        field.status = 'success';\n      }\n\n      return field;\n    });\n\n    setBoardFields(updatedFields);\n    fieldCounterIncrement();\n    playerScoreIncrement();\n  }\n};\n","import { getStore } from 'services/Store';\nimport { BOARD_PLAYER_SCORE_INCREMENT } from './actionTypes';\n\nexport default () => {\n  getStore().dispatch({\n    type: BOARD_PLAYER_SCORE_INCREMENT\n  });\n};\n","import { makeStyles } from '@material-ui/core/styles';\nimport grey from '@material-ui/core/colors/grey';\n\nconst StyleCell = makeStyles((theme) => ({\n  td: {\n    borderLeft: `1px solid ${grey[700]}`,\n    borderTop: `1px solid ${grey[700]}`\n  }\n}));\n\nexport default StyleCell;\n","import React from 'react';\nimport { tryToCatch } from './functions';\nimport Box from '@material-ui/core/Box';\nimport StyleCell from './style/StyleCell';\nimport blue from '@material-ui/core/colors/blue';\nimport green from '@material-ui/core/colors/green';\nimport red from '@material-ui/core/colors/red';\n\nexport default function BoardCell({ id, status }) {\n  const classes = StyleCell();\n\n  const handleChangeStatus = () => {\n    switch (status) {\n      case 'active':\n        return blue[500];\n      case 'success':\n        return green[500];\n      case 'fail':\n        return red[500];\n      case 'inactive':\n      default:\n        return 'white';\n    }\n  };\n\n  return (\n    <Box\n      style={{ backgroundColor: handleChangeStatus() }}\n      className={classes.td}\n      onClick={tryToCatch(id)}\n    ></Box>\n  );\n}\n","import { getState } from 'services/Store';\nimport { setPlayerTimeScore } from 'services/Store/reducers/player';\n\nexport default () => {\n  const { timeStartPlay } = getState().player;\n  const { timeEndPlay } = getState().player;\n\n  setPlayerTimeScore();\n\n  return timeEndPlay - timeStartPlay;\n};\n","import axios from 'axios';\n\nexport default async () => {\n  try {\n    const result = await axios(\n      'https://starnavi-frontend-test-task.herokuapp.com/winners'\n    );\n    return result.data;\n  } catch (error) {\n    console.error('error', error);\n  }\n};\n","import { setWinnersList } from 'services/Store/reducers/winnersList/actions';\nimport getWinnersListFromServer from './getWinnersListFromServer';\n\nexport default async () => {\n  const list = await getWinnersListFromServer();\n  list.reverse();\n\n  setWinnersList(list);\n};\n","import { getStore } from 'services/Store';\nimport { WINNERS_LIST_SET_LIST } from './actionTypes';\n\nexport default (payload) => {\n  getStore().dispatch({\n    type: WINNERS_LIST_SET_LIST,\n    payload\n  });\n};\n","import axios from 'axios';\nimport { refreshWinnersListToStore } from 'components/WinnersList/functions';\n\nexport default async (winner, date) => {\n  try {\n    await axios.post(\n      'https://starnavi-frontend-test-task.herokuapp.com/winners',\n      {\n        winner,\n        date\n      }\n    );\n    refreshWinnersListToStore();\n  } catch (error) {\n    console.log('cant send data to server ', error);\n  }\n};\n","import postSendWinners from './postSendWinners';\nimport { getState } from 'services/Store';\nimport { getCurrentDate } from 'utils';\n\nexport default async () => {\n  const { name, winnerFlag } = getState().player;\n  const currentDate = getCurrentDate();\n\n  if (winnerFlag === true) {\n    postSendWinners(name, currentDate);\n  }\n  if (winnerFlag === false) {\n    postSendWinners('Computer', currentDate);\n  }\n};\n","import updateServerWinners from './updateServerWinners';\nimport {\n  setPlayerWin,\n  setPlayerTimeEndPlay,\n  setPlayerTimeScore\n} from 'services/Store/reducers/player';\nimport { gameStop } from 'services/Store/reducers/gameStartFlag';\n\nexport default () => {\n  gameStop();\n  setPlayerTimeEndPlay();\n  setPlayerWin();\n  setPlayerTimeScore();\n  updateServerWinners();\n};\n","import { getStore } from 'services/Store';\nimport { PLAYER_SET_TIME_END_PLAY } from './actionTypes';\n\nexport default () => {\n  getStore().dispatch({\n    type: PLAYER_SET_TIME_END_PLAY\n  });\n};\n","import { getStore } from 'services/Store';\nimport { PLAYER_SET_WINNER_FLAG_TRUE } from './actionTypes';\n\nexport default () => {\n  getStore().dispatch({\n    type: PLAYER_SET_WINNER_FLAG_TRUE\n  });\n};\n","import { setPlayerLoose } from 'services/Store/reducers/player';\nimport { gameStop } from 'services/Store/reducers/gameStartFlag';\nimport updateServerWinners from './updateServerWinners';\n\nexport default () => {\n  gameStop();\n  setPlayerLoose();\n  updateServerWinners();\n};\n","import { getStore } from 'services/Store';\nimport { PLAYER_SET_WINNER_FLAG_FALSE } from './actionTypes';\n\nexport default () => {\n  getStore().dispatch({\n    type: PLAYER_SET_WINNER_FLAG_FALSE\n  });\n};\n","import Board from './Board';\n\nexport default Board;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { getState } from 'services/Store';\nimport BoardCell from './BoardCell';\nimport { isObjEmpty } from 'utils';\nimport { fieldChangeStatus, BuildBoard } from './functions';\nimport {\n  handlerPlayerWin,\n  handlerPlayerLoose\n} from 'modules/DotsGame/functions';\nimport {\n  notstarted,\n  start\n} from 'services/Store/reducers/gameStartFlag/gameStartFlagOptions';\nimport {\n  fieldCounterIncrement,\n  pcScoreIncrement\n} from 'services/Store/reducers/board';\nimport { setPlayerTimeStartPlay } from 'services/Store/reducers/player';\nimport Box from '@material-ui/core/Box';\nimport StyleBoard from './style/StyleBoard';\n\nexport default connect((state) => {\n  return {\n    dificultySelected: state.gameDificulty.dificultySelected,\n    gameStartFlag: state.gameStartFlag,\n    fields: state.board.fields,\n    fieldCounter: state.board.fieldCounter\n  };\n})(function Board({ gameStartFlag, fields, fieldCounter }) {\n  const classes = StyleBoard()();\n  const { dificultySelected } = getState().gameDificulty;\n  const { playerScore, pcScore } = getState().board;\n  const { timeScore } = getState().player;\n  const fieldsLength = fields.length;\n  const delay = dificultySelected.delay;\n\n  // init fields\n  React.useEffect(() => {\n    if (!isObjEmpty(dificultySelected) && gameStartFlag === notstarted) {\n      BuildBoard();\n    }\n  }, [dificultySelected, gameStartFlag]);\n\n  // init fields\n  React.useEffect(() => {\n    if (gameStartFlag === start) {\n      setPlayerTimeStartPlay();\n    }\n  }, [gameStartFlag]);\n\n  // game logic\n  React.useEffect(() => {\n    let delayInterval;\n    const halfOfBoardFields = Math.ceil(fieldsLength / 2);\n\n    if (gameStartFlag === start) {\n      if (playerScore > halfOfBoardFields && halfOfBoardFields > 0) {\n        handlerPlayerWin();\n      } else if (pcScore > halfOfBoardFields && halfOfBoardFields > 0) {\n        handlerPlayerLoose();\n        fieldChangeStatus(fieldCounter, 'inactive');\n      } else if (fieldCounter <= fieldsLength) {\n        fieldChangeStatus(fieldCounter, 'active');\n\n        delayInterval = setInterval(() => {\n          fieldChangeStatus(fieldCounter, 'fail');\n          fieldCounterIncrement();\n          pcScoreIncrement();\n        }, delay || 2000);\n      }\n    }\n\n    // unmount\n    return () => {\n      clearInterval(delayInterval);\n    };\n  }, [\n    delay,\n    fieldCounter,\n    fieldsLength,\n    gameStartFlag,\n    pcScore,\n    playerScore,\n    timeScore\n  ]);\n\n  const boardCells = [];\n  for (let i = 0; i < fields.length; i++) {\n    boardCells.push(\n      <BoardCell\n        key={fields[i].id}\n        id={fields[i].id}\n        status={fields[i].status}\n        fieldCounter={fieldCounter}\n      />\n    );\n  }\n\n  return (\n    <Box className={classes.root}>\n      <Box className={classes.board}>{boardCells}</Box>\n    </Box>\n  );\n});\n","import { getState } from 'services/Store';\nimport { makeStyles } from '@material-ui/core/styles';\nimport grey from '@material-ui/core/colors/grey';\n\nexport default () => {\n  const {\n    dificultySelected: { field }\n  } = getState().gameDificulty;\n\n  const boardSize = 450;\n  const coefficient = 0.8;\n\n  const StyleBoard = makeStyles((theme) => ({\n    root: {\n      margin: 'auto',\n      width: boardSize,\n      height: boardSize\n    },\n    board: {\n      display: 'grid',\n      gridTemplateColumns: `repeat(${field}, 1fr)`,\n      justifyContent: 'center',\n      gridTemplateRows: `repeat(${field}, ${boardSize / field}px)`,\n      alignItems: 'stretch',\n      borderBottom: `1px solid ${grey[700]}`,\n      borderRight: `1px solid ${grey[700]}`\n    },\n    '@media (max-width: 490px)': {\n      root: {\n        width: boardSize * coefficient,\n        height: boardSize * coefficient\n      },\n      board: {\n        gridTemplateRows: `repeat(${field}, ${(boardSize * coefficient) /\n          field}px)`\n      }\n    }\n  }));\n\n  return StyleBoard;\n};\n","import { getStore } from 'services/Store';\nimport { PLAYER_SET_TIME_START_PLAY } from './actionTypes';\n\nexport default () => {\n  getStore().dispatch({\n    type: PLAYER_SET_TIME_START_PLAY\n  });\n};\n","import { getStore } from 'services/Store';\nimport { BOARD_PC_SCORE_INCREMENT } from './actionTypes';\n\nexport default () => {\n  getStore().dispatch({\n    type: BOARD_PC_SCORE_INCREMENT\n  });\n};\n","import MainPanel from './MainPanel';\n\nexport default MainPanel;\n","import React from 'react';\nimport ConfigInputs from 'components/ConfigInputs';\nimport InfoText from 'components/InfoText';\nimport Board from 'components/Board';\nimport Box from '@material-ui/core/Box';\n\nexport default function MainPanel() {\n  return (\n    <Box>\n      <ConfigInputs />\n      <InfoText />\n      <Board />\n    </Box>\n  );\n}\n","import React from 'react';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport grey from '@material-ui/core/colors/grey';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    borderBottom: `1px solid ${grey[300]}`,\n    marginTop: 10\n  }\n}));\n\nexport default React.memo(function Winner({ name, date }) {\n  const classes = useStyles();\n  return (\n    <Box className={classes.root}>\n      <Typography variant={'subtitle2'}>{name}</Typography>\n      <Typography variant={'subtitle2'}>{date}</Typography>\n    </Box>\n  );\n});\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst WinnersListStyle = makeStyles((theme) => ({\n  root: {},\n  title: {\n    textAlign: 'center',\n    marginBottom: 15\n  },\n  listWrapper: {\n    overflowY: 'auto',\n    height: 500,\n    maxWidth: 500,\n    margin: '0 auto',\n    paddingRight: 10\n  },\n  '@media (max-width: 960px)': {\n    listWrapper: {\n      height: 200\n    }\n  }\n}));\n\nexport default WinnersListStyle;\n","import WinnersList from './WinnersList';\n\nexport default WinnersList;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Winner from './Winner';\nimport { refreshWinnersListToStore } from './functions';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport { winnersListStyle } from './style';\n\nexport default connect((state) => {\n  return {\n    gameStartFlag: state.gameStartFlag,\n    winnersList: state.winnersList\n  };\n})(\n  React.memo(function WinnersList({ gameStartFlag, winnersList }) {\n    const classes = winnersListStyle();\n\n    React.useEffect(() => {\n      refreshWinnersListToStore();\n    }, [gameStartFlag]);\n\n    return (\n      <Box className={classes.root}>\n        <Typography className={classes.title} variant={'h4'}>\n          Winner Board\n        </Typography>\n        <Box className={classes.listWrapper}>\n          {winnersList.map((winner) => {\n            return (\n              <Winner key={winner.id} name={winner.winner} date={winner.date} />\n            );\n          })}\n        </Box>\n      </Box>\n    );\n  })\n);\n","import React from 'react';\nimport WinnersList from 'components/WinnersList';\nimport Box from '@material-ui/core/Box';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: 15\n  }\n}));\n\nexport default React.memo(function InfoPanel() {\n  const classes = useStyles();\n  return (\n    <Box className={classes.root}>\n      <WinnersList />\n    </Box>\n  );\n});\n","import InfoPanel from './InfoPanel';\n\nexport default InfoPanel;\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100%',\n    marginTop: 20\n  }\n}));\n\nexport default useStyles;\n","import DotsGame from './DotsGame';\n\nexport default DotsGame;\n","import React from 'react';\nimport MainPanel from 'sections/MainPanel';\nimport InfoPanel from 'sections/InfoPanel';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport useStyles from './style/useStyles';\n\nexport default function DotsGame() {\n  const classes = useStyles();\n\n  return (\n    <Container className={classes.root}>\n      <Grid container>\n        <Grid item xs={12} md={8}>\n          <MainPanel />\n        </Grid>\n        <Grid item xs={12} md={4}>\n          <InfoPanel />\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n","import { makeStyles } from '@material-ui/core/styles';\nimport grey from '@material-ui/core/colors/grey';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    minHeight: 36,\n    backgroundColor: grey[300]\n    // color: '#fff'\n  },\n  toolBar: {\n    justifyContent: 'center',\n    textTransform: 'uppercase'\n  }\n}));\n\nexport default useStyles;\n","import Footer from './Footer';\n\nexport default Footer;\n","import React from 'react';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport useStyles from './style/useStyles';\n\nexport default React.memo(function Footer() {\n  const classes = useStyles();\n  const currentYear = new Date().getFullYear();\n  return (\n    <Box className={classes.root}>\n      <Typography variant={'subtitle1'}>©{currentYear}</Typography>\n    </Box>\n  );\n});\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100%'\n  },\n  gameWrapper: {\n    flexGrow: 1\n  }\n}));\n\nexport default useStyles;\n","import React from 'react';\nimport Header from 'components/Header';\nimport DotsGame from 'modules/DotsGame';\nimport Footer from 'components/Footer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Box from '@material-ui/core/Box';\nimport './style/global.css';\nimport { useStyles } from './style';\nimport 'typeface-roboto';\n\nfunction App() {\n  const classes = useStyles();\n  return (\n    <Box className={classes.root}>\n      <CssBaseline />\n\n      <Header />\n      <Box className={classes.gameWrapper}>\n        <DotsGame />\n      </Box>\n      <Footer />\n    </Box>\n  );\n}\n\nexport default App;\n","import App from './App';\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'App';\nimport {\n  newStore,\n  StoreProvider,\n  gameDificulty,\n  gameStartFlag,\n  player,\n  board,\n  winnersList\n} from 'services/Store';\n\nnewStore({ gameDificulty, gameStartFlag, player, board, winnersList });\n\nReactDOM.render(\n  <StoreProvider>\n    <App />\n  </StoreProvider>,\n  document.getElementById('root')\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { getStore } from 'services/Store';\n\nexport default ({ children }) => (\n  <Provider store={getStore()}>{children}</Provider>\n);\n"],"sourceRoot":""}