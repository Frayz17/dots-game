{"version":3,"sources":["components/Header/style/useStyles.js","components/Header/index.js","components/Header/Header.js","components/ConfigInputs/style/styleBtnSumit.js","services/Store/reducers/gameStartFlag/gameStartFlagOptions.js","components/ConfigInputs/SubmitBtn.js","utils/isObjEmpty.js","utils/getCurrentDate.js","services/Store/Store.js","services/Store/reducers/gameDificulty/index.js","services/Store/reducers/gameDificulty/gameDificulty.js","services/Store/reducers/gameDificulty/actions/actionTypes.js","services/Store/reducers/gameStartFlag/actions/gameStop.js","services/Store/reducers/gameStartFlag/actions/actionTypes.js","services/Store/reducers/gameStartFlag/index.js","services/Store/reducers/gameStartFlag/gameStartFlag.js","services/Store/reducers/player/actions/setPlayerTimeScore.js","services/Store/reducers/player/actions/actionTypes.js","services/Store/reducers/player/index.js","services/Store/reducers/player/player.js","services/Store/reducers/board/actions/fieldCounterIncrement.js","services/Store/reducers/board/actions/actionTypes.js","services/Store/reducers/board/actions/setBoardFields.js","services/Store/reducers/board/index.js","services/Store/reducers/board/board.js","services/Store/reducers/winnersList/index.js","services/Store/reducers/winnersList/winnersList.js","services/Store/reducers/winnersList/actions/actionTypes.js","components/ConfigInputs/functions/handleSelectDificulty.js","services/Store/reducers/gameDificulty/actions/chooseGameDificulty.js","components/ConfigInputs/functions/handleSetPlayerName.js","services/Store/reducers/player/actions/setPlayerName.js","components/ConfigInputs/functions/handleFormSubmit.js","services/Store/reducers/gameStartFlag/actions/gameStart.js","services/Store/reducers/gameStartFlag/actions/gameStartFlagReset.js","services/Store/reducers/board/actions/boardReset.js","services/Store/reducers/player/actions/playerResetGame.js","components/ConfigInputs/style/styleConfigInputs.js","components/ConfigInputs/index.js","components/ConfigInputs/ConfigInputs.js","components/ConfigInputs/functions/setDificultyList.js","services/Store/reducers/gameDificulty/actions/setGameDificultyList.js","components/ConfigInputs/functions/stringFormatter.js","components/InfoText/style/infoTextStyle.js","components/InfoText/index.js","components/InfoText/InfoText.js","components/Board/functions/fieldChangeStatus.js","components/Board/functions/BuildBoard.js","utils/arrayShuffle.js","components/Board/functions/tryToCatch.js","services/Store/reducers/board/actions/playerScoreIncrement.js","components/Board/style/StyleCell.js","components/Board/BoardCell.js","modules/DotsGame/functions/getPlayerTimeScore.js","components/WinnersList/functions/getWinnersListFromServer.js","components/WinnersList/functions/refreshWinnersListToStore.js","services/Store/reducers/winnersList/actions/setWinnersList.js","modules/DotsGame/functions/postSendWinners.js","modules/DotsGame/functions/updateServerWinners.js","modules/DotsGame/functions/handlerPlayerWin.js","services/Store/reducers/player/actions/setPlayerTimeEndPlay.js","services/Store/reducers/player/actions/setPlayerWin.js","modules/DotsGame/functions/handlerPlayerLoose.js","services/Store/reducers/player/actions/setPlayerLoose.js","components/Board/index.js","components/Board/Board.js","components/Board/style/StyleBoard.js","services/Store/reducers/player/actions/setPlayerTimeStartPlay.js","services/Store/reducers/board/actions/pcScoreIncrement.js","sections/MainPanel/index.js","sections/MainPanel/MainPanel.js","components/WinnersList/Winner.js","components/WinnersList/style/winnersListStyle.js","components/WinnersList/index.js","components/WinnersList/WinnersList.js","sections/InfoPanel/InfoPanel.js","sections/InfoPanel/index.js","modules/DotsGame/style/useStyles.js","modules/DotsGame/index.js","modules/DotsGame/DotsGame.js","components/Footer/style/useStyles.js","components/Footer/index.js","components/Footer/Footer.js","App/style/useStyles.js","App/App.js","App/index.js","index.js","services/Store/StoreProvider.js"],"names":["useStyles","makeStyles","theme","toolBar","justifyContent","textTransform","Header","React","memo","classes","AppBar","position","Toolbar","className","Typography","variant","styleBtnSumit","btnSubmit","width","marginTop","start","createMuiTheme","palette","secondary","main","connect","state","gameStartFlag","isSubmitEnabled","text","btnColor","ThemeProvider","Button","type","color","disabled","obj","Object","entries","length","constructor","addZero","i","currentdate","Date","month","Intl","DateTimeFormat","format","getHours","getMinutes","getDate","getFullYear","Store","getStore","getState","gameDificulty","dificultiesList","dificultySelected","field","delay","name","action","payload","dispatch","timeStartPlay","player","timeEndPlay","winnerFlag","timeScore","getTime","board","fields","fieldCounter","playerScore","pcScore","winnersList","event","nameOfDificulty","target","value","selectedDificulty","handleFormSubmit","e","preventDefault","styleConfigInputs","form","display","alignItems","formControl","margin","spacing","selectDificulty","playerNameInput","flexDirection","ConfigInputs","isObjEmpty","isEditInputsDisabled","useEffect","a","async","axios","result","data","console","error","setDificultyList","dificultiesName","keys","Box","onSubmit","FormControl","required","InputLabel","id","Select","labelId","onChange","handleSelectDificulty","map","MenuItem","key","string","charAt","toUpperCase","substring","replace","FormHelperText","TextField","label","handleSetPlayerName","helperText","inputProps","minLength","maxLength","SubmitBtn","infoTextStyle","root","marginBottom","InfoText","resultGameMsg","fieldChangeStatus","status","updatedFields","setBoardFields","fieldsSide","allFields","collector","push","catch","arr","_arr","j","Math","floor","random","arrayShuffle","fieldCounterIncrement","StyleCell","td","borderLeft","grey","borderTop","BoardCell","style","backgroundColor","blue","green","red","handleChangeStatus","onClick","tryToCatch","getWinnersListFromServer","list","reverse","winner","date","post","refreshWinnersListToStore","log","currentDate","getCurrentDate","postSendWinners","gameStop","setPlayerTimeScore","updateServerWinners","Board","height","gridTemplateColumns","gridTemplateRows","borderBottom","borderRight","boardSize","StyleBoard","fieldsLength","BuildBoard","delayInterval","halfOfBoardFields","ceil","handlerPlayerWin","handlerPlayerLoose","setInterval","clearInterval","boardCells","MainPanel","WinnersListStyle","title","textAlign","listWrapper","overflowY","maxWidth","paddingRight","WinnersList","winnersListStyle","InfoPanel","paddingTop","paddingBottom","DotsGame","Container","Grid","container","item","xs","md","minHeight","Footer","currentYear","gameWrapper","flexGrow","App","CssBaseline","reducers","middleware","combined","combineReducers","applied","applyMiddleware","thunk","store","next","createStore","undefined","newStore","ReactDOM","render","children","document","getElementById"],"mappings":"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","file":"static/js/main.f8ac68ba.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  toolBar: {\r\n    justifyContent: 'center',\r\n    textTransform: 'uppercase'\r\n  }\r\n}));\r\n\r\nexport default useStyles;\r\n","import Header from './Header';\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport useStyles from './style/useStyles';\r\n\r\nexport default React.memo(function Header() {\r\n  const classes = useStyles();\r\n  return (\r\n    <AppBar position='static'>\r\n      <Toolbar className={classes.toolBar}>\r\n        <Typography variant={'h5'}>Dots Game</Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n});\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst styleBtnSumit = makeStyles((theme) => {\r\n  return {\r\n    btnSubmit: {\r\n      width: 120\r\n    },\r\n    '@media (max-width: 599px)': {\r\n      btnSubmit: {\r\n        width: 250,\r\n        marginTop: 15\r\n      }\r\n    }\r\n  };\r\n});\r\n\r\nexport default styleBtnSumit;\r\n","const notstarted = 'notstarted';\r\nconst start = 'start';\r\nconst stop = 'stop';\r\n\r\nexport { notstarted, start, stop };\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Button from '@material-ui/core/Button';\r\nimport styleBtnSumit from './style/styleBtnSumit';\r\nimport {\r\n  start,\r\n  stop\r\n} from 'services/Store/reducers/gameStartFlag/gameStartFlagOptions';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    secondary: {\r\n      main: '#ad1457'\r\n    }\r\n  }\r\n});\r\n\r\nexport default connect((state) => {\r\n  return {\r\n    gameStartFlag: state.gameStartFlag\r\n  };\r\n})(\r\n  React.memo(function submitBtn({ gameStartFlag, isSubmitEnabled }) {\r\n    const classes = styleBtnSumit();\r\n\r\n    let text = 'play';\r\n    let btnColor = 'primary';\r\n\r\n    if (gameStartFlag === start || gameStartFlag === stop) {\r\n      text = 'play again';\r\n      btnColor = 'secondary';\r\n    }\r\n\r\n    return (\r\n      <ThemeProvider theme={theme}>\r\n        <Button\r\n          className={classes.btnSubmit}\r\n          type='submit'\r\n          variant='contained'\r\n          color={btnColor}\r\n          disabled={!isSubmitEnabled}\r\n        >\r\n          {text}\r\n        </Button>\r\n      </ThemeProvider>\r\n    );\r\n  })\r\n);\r\n","export default (obj) => {\r\n  return Object.entries(obj).length === 0 && obj.constructor === Object;\r\n};\r\n","function addZero(i) {\r\n  if (i < 10) {\r\n    i = '0' + i;\r\n  }\r\n  return i;\r\n}\r\n\r\nexport default () => {\r\n  const currentdate = new Date();\r\n  const monthFormatter = new Intl.DateTimeFormat('en-US', { month: 'long' });\r\n  const month = monthFormatter.format(currentdate);\r\n\r\n  const datetime =\r\n    addZero(currentdate.getHours()) +\r\n    ':' +\r\n    addZero(currentdate.getMinutes()) +\r\n    '; ' +\r\n    addZero(currentdate.getDate()) +\r\n    ' ' +\r\n    month +\r\n    ' ' +\r\n    currentdate.getFullYear();\r\n\r\n  return datetime;\r\n};\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nlet Store = null;\r\n\r\nexport const newStore = (reducers = {}, middleware) => {\r\n  const combined = combineReducers(reducers);\r\n  const applied = applyMiddleware(\r\n    thunk,\r\n    !middleware ? (store) => (next) => (action) => next(action) : middleware\r\n  );\r\n\r\n  return (Store = createStore(combined, undefined, applied));\r\n};\r\n\r\nexport const getStore = () => {\r\n  return Store;\r\n};\r\n\r\nexport const getState = () => {\r\n  return Store.getState();\r\n};\r\n","import gameDificulty from './gameDificulty';\r\nimport { chooseGameDificulty, setGameDificultyList } from './actions';\r\n\r\nexport default gameDificulty;\r\n\r\nexport { chooseGameDificulty, setGameDificultyList };\r\n","import {\r\n  GAME_DIFICULTY_LIST_SET,\r\n  GAME_DIFICULTY_CHOOSE\r\n} from './actions/actionTypes';\r\n\r\nexport default (\r\n  state = {\r\n    dificultiesList: {},\r\n    dificultySelected: { field: 10, delay: 1000, name: 'normalMode' }\r\n  },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case GAME_DIFICULTY_LIST_SET:\r\n      return { ...state, dificultiesList: { ...action.payload } };\r\n    case GAME_DIFICULTY_CHOOSE:\r\n      return { ...state, dificultySelected: action.payload };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n","const GAME_DIFICULTY_LIST_SET = 'GAME_DIFICULTY_LIST_SET';\r\nconst GAME_DIFICULTY_CHOOSE = 'GAME_DIFICULTY_CHOOSE';\r\n\r\nexport { GAME_DIFICULTY_LIST_SET, GAME_DIFICULTY_CHOOSE };\r\n","import { getStore } from 'services/Store';\r\nimport { GAME_START_SET_STOP } from './actionTypes';\r\n\r\nexport default () => {\r\n  getStore().dispatch({\r\n    type: GAME_START_SET_STOP\r\n  });\r\n};\r\n","const GAME_START_SET_START = 'GAME_START_SET_START';\r\nconst GAME_START_SET_STOP = 'GAME_START_SET_STOP';\r\nconst GAME_START_FLAG_RESET = 'GAME_START_FLAG_RESET';\r\n\r\nexport { GAME_START_SET_START, GAME_START_SET_STOP, GAME_START_FLAG_RESET };\r\n","import gameStartFlag from './gameStartFlag';\r\nimport { gameStart, gameStop, gameStartFlagReset } from './actions';\r\n\r\nexport default gameStartFlag;\r\n\r\nexport { gameStart, gameStop, gameStartFlagReset };\r\n","import {\r\n  GAME_START_SET_START,\r\n  GAME_START_SET_STOP,\r\n  GAME_START_FLAG_RESET\r\n} from './actions/actionTypes';\r\nimport { notstarted, start, stop } from './gameStartFlagOptions';\r\n\r\nexport default (state = 'notstarted', action) => {\r\n  switch (action.type) {\r\n    case GAME_START_SET_START:\r\n      return start;\r\n    case GAME_START_SET_STOP:\r\n      return stop;\r\n    case GAME_START_FLAG_RESET:\r\n      return notstarted;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { getStore, getState } from 'services/Store';\r\nimport { PLAYER_SET_TIME_SCORE } from './actionTypes';\r\n\r\nexport default () => {\r\n  const { timeStartPlay } = getState().player;\r\n  const { timeEndPlay } = getState().player;\r\n\r\n  if (timeEndPlay > timeStartPlay) {\r\n    getStore().dispatch({\r\n      type: PLAYER_SET_TIME_SCORE,\r\n      payload: timeEndPlay - timeStartPlay\r\n    });\r\n  }\r\n};\r\n","const PLAYER_NAME_SET = 'PLAYER_NAME_SET';\r\nconst PLAYER_SET_WINNER_FLAG_TRUE = 'PLAYER_SET_WINNER_FLAG_TRUE';\r\nconst PLAYER_SET_WINNER_FLAG_FALSE = 'PLAYER_SET_WINNER_FLAG_FALSE';\r\nconst PLAYER_SET_TIME_START_PLAY = 'PLAYER_SET_TIME_START_PLAY';\r\nconst PLAYER_SET_TIME_END_PLAY = 'PLAYER_SET_TIME_END_PLAY';\r\nconst PLAYER_SET_TIME_SCORE = 'PLAYER_SET_TIME_SCORE';\r\nconst PLAYER_RESET_GAME = 'PLAYER_RESET_GAME';\r\nconst PLAYER_RESET_ALL = 'PLAYER_RESET_ALL';\r\n\r\nexport {\r\n  PLAYER_NAME_SET,\r\n  PLAYER_SET_WINNER_FLAG_TRUE,\r\n  PLAYER_SET_WINNER_FLAG_FALSE,\r\n  PLAYER_SET_TIME_START_PLAY,\r\n  PLAYER_SET_TIME_END_PLAY,\r\n  PLAYER_SET_TIME_SCORE,\r\n  PLAYER_RESET_GAME,\r\n  PLAYER_RESET_ALL\r\n};\r\n","import player from './player';\r\nimport {\r\n  setPlayerName,\r\n  setPlayerWin,\r\n  setPlayerLoose,\r\n  setPlayerTimeStartPlay,\r\n  setPlayerTimeEndPlay,\r\n  setPlayerTimeScore,\r\n  playerReset,\r\n  playerResetGame\r\n} from './actions';\r\n\r\nexport default player;\r\n\r\nexport {\r\n  setPlayerName,\r\n  setPlayerWin,\r\n  setPlayerLoose,\r\n  setPlayerTimeStartPlay,\r\n  setPlayerTimeEndPlay,\r\n  setPlayerTimeScore,\r\n  playerReset,\r\n  playerResetGame\r\n};\r\n","import {\r\n  PLAYER_NAME_SET,\r\n  PLAYER_SET_WINNER_FLAG_TRUE,\r\n  PLAYER_SET_WINNER_FLAG_FALSE,\r\n  PLAYER_SET_TIME_START_PLAY,\r\n  PLAYER_SET_TIME_END_PLAY,\r\n  PLAYER_SET_TIME_SCORE,\r\n  PLAYER_RESET_GAME,\r\n  PLAYER_RESET_ALL\r\n} from './actions/actionTypes';\r\n\r\nexport default (\r\n  state = {\r\n    name: '',\r\n    winnerFlag: null,\r\n    timeStartPlay: 0,\r\n    timeEndPlay: 0,\r\n    timeScore: null\r\n  },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case PLAYER_NAME_SET:\r\n      return { ...state, name: action.payload };\r\n    case PLAYER_SET_WINNER_FLAG_TRUE:\r\n      return { ...state, winnerFlag: true };\r\n    case PLAYER_SET_WINNER_FLAG_FALSE:\r\n      return { ...state, winnerFlag: false };\r\n    case PLAYER_SET_TIME_START_PLAY:\r\n      return { ...state, timeStartPlay: new Date().getTime() };\r\n    case PLAYER_SET_TIME_END_PLAY:\r\n      return { ...state, timeEndPlay: new Date().getTime() };\r\n    case PLAYER_SET_TIME_SCORE:\r\n      return { ...state, timeScore: action.payload };\r\n    case PLAYER_RESET_GAME:\r\n      return {\r\n        ...state,\r\n        winnerFlag: null,\r\n        timeStartPlay: 0,\r\n        timeEndPlay: 0,\r\n        timeScore: null\r\n      };\r\n    case PLAYER_RESET_ALL:\r\n      return {\r\n        name: '',\r\n        winnerFlag: null,\r\n        timeStartPlay: 0,\r\n        timeEndPlay: 0,\r\n        timeScore: null\r\n      };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n","import { getStore } from 'services/Store';\r\nimport { BOARD_FIELD_COUNTER_INCREMENT } from './actionTypes';\r\n\r\nexport default () => {\r\n  getStore().dispatch({\r\n    type: BOARD_FIELD_COUNTER_INCREMENT\r\n  });\r\n};\r\n","const SET_BOARD_FIELDS = 'SET_BOARD_FIELDS';\r\nconst BOARD_FIELD_COUNTER_INCREMENT = 'BOARD_FIELD_COUNTER_INCREMENT';\r\nconst BOARD_PLAYER_SCORE_INCREMENT = 'BOARD_PLAYER_SCORE_INCREMENT';\r\nconst BOARD_PC_SCORE_INCREMENT = 'BOARD_PC_SCORE_INCREMENT';\r\nconst BOARD_RESET = 'BOARD_RESET';\r\n\r\nexport {\r\n  SET_BOARD_FIELDS,\r\n  BOARD_FIELD_COUNTER_INCREMENT,\r\n  BOARD_PLAYER_SCORE_INCREMENT,\r\n  BOARD_PC_SCORE_INCREMENT,\r\n  BOARD_RESET\r\n};\r\n","import { getStore } from 'services/Store';\r\nimport { SET_BOARD_FIELDS } from './actionTypes';\r\n\r\nexport default (payload) => {\r\n  getStore().dispatch({\r\n    type: SET_BOARD_FIELDS,\r\n    payload\r\n  });\r\n};\r\n","import board from './board';\r\nimport {\r\n  pcScoreIncrement,\r\n  playerScoreIncrement,\r\n  fieldCounterIncrement,\r\n  setBoardFields,\r\n  boardReset\r\n} from './actions';\r\n\r\nexport default board;\r\n\r\nexport {\r\n  pcScoreIncrement,\r\n  playerScoreIncrement,\r\n  fieldCounterIncrement,\r\n  setBoardFields,\r\n  boardReset\r\n};\r\n","import {\r\n  SET_BOARD_FIELDS,\r\n  BOARD_FIELD_COUNTER_INCREMENT,\r\n  BOARD_PLAYER_SCORE_INCREMENT,\r\n  BOARD_PC_SCORE_INCREMENT,\r\n  BOARD_RESET\r\n} from './actions/actionTypes';\r\n\r\nexport default (\r\n  state = {\r\n    fields: [],\r\n    fieldCounter: 0,\r\n    playerScore: 0,\r\n    pcScore: 0\r\n  },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case SET_BOARD_FIELDS:\r\n      return { ...state, fields: action.payload };\r\n    case BOARD_FIELD_COUNTER_INCREMENT:\r\n      return { ...state, fieldCounter: state.fieldCounter + 1 };\r\n    case BOARD_PLAYER_SCORE_INCREMENT:\r\n      return { ...state, playerScore: state.playerScore + 1 };\r\n    case BOARD_PC_SCORE_INCREMENT:\r\n      return { ...state, pcScore: state.pcScore + 1 };\r\n    case BOARD_RESET:\r\n      return { fields: [], fieldCounter: 0, playerScore: 0, pcScore: 0 };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n","import winnersList from './winnersList';\r\n\r\nexport default winnersList;\r\n","import { WINNERS_LIST_SET_LIST } from './actions';\r\n\r\nexport default (state = [], action) => {\r\n  switch (action.type) {\r\n    case WINNERS_LIST_SET_LIST:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","const WINNERS_LIST_SET_LIST = 'WINNERS_LIST_SET_LIST';\r\n\r\nexport { WINNERS_LIST_SET_LIST };\r\n","import { getState } from 'services/Store';\r\nimport { notstarted } from 'services/Store/reducers/gameStartFlag/gameStartFlagOptions';\r\nimport { chooseGameDificulty } from 'services/Store/reducers/gameDificulty';\r\n\r\nexport default (event) => {\r\n  const { gameStartFlag } = getState();\r\n  const { dificultiesList } = getState().gameDificulty;\r\n\r\n  const nameOfDificulty = event.target.value;\r\n  const selectedDificulty = {\r\n    ...dificultiesList[event.target.value],\r\n    name: nameOfDificulty\r\n  };\r\n\r\n  if (gameStartFlag === notstarted) {\r\n    chooseGameDificulty(selectedDificulty);\r\n  }\r\n};\r\n","import { getStore } from 'services/Store';\r\nimport { GAME_DIFICULTY_CHOOSE } from './actionTypes';\r\n\r\nexport default (payload) => {\r\n  getStore().dispatch({\r\n    type: GAME_DIFICULTY_CHOOSE,\r\n    payload\r\n  });\r\n};\r\n","import { getState } from 'services/Store';\r\nimport { setPlayerName } from 'services/Store/reducers/player';\r\nimport { notstarted } from 'services/Store/reducers/gameStartFlag/gameStartFlagOptions';\r\n\r\nexport default (event) => {\r\n  const { gameStartFlag } = getState();\r\n\r\n  if (gameStartFlag === notstarted) {\r\n    setPlayerName(event.target.value);\r\n  }\r\n};\r\n","import { getStore } from 'services/Store';\r\nimport { PLAYER_NAME_SET } from './actionTypes';\r\n\r\nexport default (payload) => {\r\n  getStore().dispatch({\r\n    type: PLAYER_NAME_SET,\r\n    payload\r\n  });\r\n};\r\n","import { getState } from 'services/Store';\r\nimport {\r\n  gameStart,\r\n  gameStartFlagReset\r\n} from 'services/Store/reducers/gameStartFlag';\r\nimport {\r\n  start,\r\n  stop\r\n} from 'services/Store/reducers/gameStartFlag/gameStartFlagOptions';\r\nimport { boardReset } from 'services/Store/reducers/board';\r\nimport { playerResetGame } from 'services/Store/reducers/player';\r\n\r\nconst handleFormSubmit = (isSubmitEnabled) => (e) => {\r\n  e.preventDefault();\r\n\r\n  const { gameStartFlag } = getState();\r\n\r\n  if (isSubmitEnabled) {\r\n    gameStart();\r\n  }\r\n  if (gameStartFlag === start || gameStartFlag === stop) {\r\n    gameStartFlagReset();\r\n    boardReset();\r\n    playerResetGame();\r\n  }\r\n};\r\n\r\nexport default handleFormSubmit;\r\n","import { getStore } from 'services/Store';\r\nimport { GAME_START_SET_START } from './actionTypes';\r\n\r\nexport default () => {\r\n  getStore().dispatch({\r\n    type: GAME_START_SET_START\r\n  });\r\n};\r\n","import { getStore } from 'services/Store';\r\nimport { GAME_START_FLAG_RESET } from './actionTypes';\r\n\r\nexport default () => {\r\n  getStore().dispatch({\r\n    type: GAME_START_FLAG_RESET\r\n  });\r\n};\r\n","import { getStore } from 'services/Store';\r\nimport { BOARD_RESET } from './actionTypes';\r\n\r\nexport default () => {\r\n  getStore().dispatch({\r\n    type: BOARD_RESET\r\n  });\r\n};\r\n","import { getStore } from 'services/Store';\r\nimport { PLAYER_RESET_GAME } from './actionTypes';\r\n\r\nexport default () => {\r\n  getStore().dispatch({\r\n    type: PLAYER_RESET_GAME\r\n  });\r\n};\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst styleConfigInputs = makeStyles((theme) => {\r\n  return {\r\n    form: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center'\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(1)\r\n    },\r\n    selectDificulty: {\r\n      width: 180\r\n    },\r\n    playerNameInput: {\r\n      width: 180\r\n    },\r\n    '@media (max-width: 599px)': {\r\n      form: {\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n      },\r\n      selectDificulty: {\r\n        width: 250\r\n      },\r\n      playerNameInput: {\r\n        width: 250\r\n      }\r\n    }\r\n  };\r\n});\r\n\r\nexport default styleConfigInputs;\r\n","import ConfigInputs from './ConfigInputs';\r\n\r\nexport default ConfigInputs;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport SubmitBtn from './SubmitBtn';\r\nimport { isObjEmpty } from 'utils';\r\nimport handleSelectDificulty from './functions/handleSelectDificulty';\r\nimport setDificultyList from './functions/setDificultyList';\r\nimport handleSetPlayerName from './functions/handleSetPlayerName';\r\nimport handleFormSubmit from './functions/handleFormSubmit';\r\nimport stringFormatter from './functions/stringFormatter';\r\nimport { notstarted } from 'services/Store/reducers/gameStartFlag/gameStartFlagOptions';\r\nimport Box from '@material-ui/core/Box';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport styleConfigInputs from './style/styleConfigInputs';\r\n\r\nexport default connect((state) => {\r\n  return {\r\n    gameDificulty: state.gameDificulty,\r\n    player: state.player,\r\n    gameStartFlag: state.gameStartFlag\r\n  };\r\n})(\r\n  React.memo(function ConfigInputs({\r\n    gameDificulty: { dificultiesList, dificultySelected },\r\n    player,\r\n    gameStartFlag\r\n  }) {\r\n    const classes = styleConfigInputs();\r\n\r\n    const isSubmitEnabled =\r\n      player.name.length > 3 &&\r\n      dificultySelected !== '' &&\r\n      !isObjEmpty(dificultySelected);\r\n\r\n    const isEditInputsDisabled = gameStartFlag !== notstarted;\r\n\r\n    React.useEffect(() => {\r\n      setDificultyList();\r\n    }, []);\r\n\r\n    const dificultiesName = Object.keys(dificultiesList);\r\n\r\n    return (\r\n      <Box>\r\n        {!isObjEmpty(dificultiesList) ? (\r\n          <form\r\n            className={classes.form}\r\n            onSubmit={handleFormSubmit(isSubmitEnabled)}\r\n          >\r\n            <FormControl\r\n              disabled={isEditInputsDisabled}\r\n              required\r\n              className={classes.formControl}\r\n            >\r\n              <InputLabel id='dificulty-select-label'>\r\n                Select Dificulty\r\n              </InputLabel>\r\n              <Select\r\n                labelId='dificulty-select-label'\r\n                id='dificulty-select'\r\n                className={classes.selectDificulty}\r\n                value={dificultySelected.name}\r\n                onChange={handleSelectDificulty}\r\n              >\r\n                {dificultiesName.map((name) => {\r\n                  return (\r\n                    <MenuItem key={name} value={name}>\r\n                      {stringFormatter(name)}\r\n                    </MenuItem>\r\n                  );\r\n                })}\r\n              </Select>\r\n              <FormHelperText>choose dificulty</FormHelperText>\r\n            </FormControl>\r\n\r\n            <TextField\r\n              className={classes.playerNameInput}\r\n              label='Player Name'\r\n              onChange={handleSetPlayerName}\r\n              value={player.name}\r\n              required\r\n              disabled={isEditInputsDisabled}\r\n              helperText='must be at least 4 characters'\r\n              inputProps={{\r\n                minLength: 4,\r\n                maxLength: 20\r\n              }}\r\n            />\r\n\r\n            <FormControl className={classes.formControl}>\r\n              <SubmitBtn isSubmitEnabled={isSubmitEnabled} />\r\n            </FormControl>\r\n          </form>\r\n        ) : null}\r\n      </Box>\r\n    );\r\n  })\r\n);\r\n","import { setGameDificultyList } from 'services/Store/reducers/gameDificulty';\r\nimport axios from 'axios';\r\n\r\nexport default async (event) => {\r\n  try {\r\n    const result = await axios(\r\n      'https://starnavi-frontend-test-task.herokuapp.com/game-settings'\r\n    );\r\n\r\n    setGameDificultyList(result.data);\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n","import { getStore } from 'services/Store';\r\nimport { GAME_DIFICULTY_LIST_SET } from './actionTypes';\r\n\r\nexport default (payload) => {\r\n  getStore().dispatch({\r\n    type: GAME_DIFICULTY_LIST_SET,\r\n    payload\r\n  });\r\n};\r\n","export default (string) => {\r\n  return (\r\n    string.charAt(0).toUpperCase() +\r\n    string.substring(1).replace(/([a-z])([A-Z])/, '$1 $2')\r\n  );\r\n};\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst infoTextStyle = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    marginTop: 30,\r\n    marginBottom: 30\r\n  },\r\n  text: {}\r\n}));\r\n\r\nexport default infoTextStyle;\r\n","import InfoText from './InfoText';\r\n\r\nexport default InfoText;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getState } from 'services/Store';\r\nimport {\r\n  notstarted,\r\n  start,\r\n  stop\r\n} from 'services/Store/reducers/gameStartFlag/gameStartFlagOptions';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { infoTextStyle } from './style';\r\n\r\nexport default connect((state) => {\r\n  return {\r\n    gameStartFlag: state.gameStartFlag,\r\n    winnerFlag: state.player.winnerFlag\r\n  };\r\n})(\r\n  React.memo(function InfoText({ gameStartFlag, winnerFlag }) {\r\n    const classes = infoTextStyle();\r\n    const { name } = getState().player;\r\n\r\n    let text = '';\r\n    let resultGameMsg = '';\r\n\r\n    if (winnerFlag === true) {\r\n      resultGameMsg = `Player ${name} is winner!`;\r\n    } else if (winnerFlag === false) {\r\n      resultGameMsg = `Player ${name} loose.`;\r\n    }\r\n\r\n    switch (gameStartFlag) {\r\n      case notstarted:\r\n        text = 'Welcome to our Game!';\r\n        break;\r\n      case start:\r\n        text = 'Press on blue squares.';\r\n        break;\r\n      case stop:\r\n        text = resultGameMsg;\r\n        break;\r\n      default:\r\n        text = '';\r\n    }\r\n    return (\r\n      <Box className={classes.root}>\r\n        <Typography className={classes.text} variant={'h5'}>\r\n          {text}\r\n        </Typography>\r\n      </Box>\r\n    );\r\n  })\r\n);\r\n","import { getState } from 'services/Store';\r\nimport { setBoardFields } from 'services/Store/reducers/board';\r\n\r\nconst fieldChangeStatus = (id, status) => {\r\n  const { fields } = getState().board;\r\n\r\n  const updatedFields = fields.map((field) => {\r\n    if (field.id === id && field.status !== 'success') {\r\n      field.status = status;\r\n    }\r\n\r\n    return field;\r\n  });\r\n\r\n  setBoardFields(updatedFields);\r\n};\r\n\r\nexport default fieldChangeStatus;\r\n","import { getState } from 'services/Store';\r\nimport { arrayShuffle } from 'utils';\r\nimport { setBoardFields } from 'services/Store/reducers/board';\r\n\r\nexport default () => {\r\n  const fieldsSide = getState().gameDificulty.dificultySelected.field;\r\n\r\n  const allFields = fieldsSide * fieldsSide;\r\n  const collector = [];\r\n  for (let i = 0; i < allFields; i++) {\r\n    collector.push({ id: i, status: 'inactive', catch: null });\r\n  }\r\n\r\n  setBoardFields(arrayShuffle(collector));\r\n};\r\n","export default function arrayShuffle(arr) {\r\n  const _arr = [...arr];\r\n\r\n  for (let i = _arr.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [_arr[i], _arr[j]] = [_arr[j], _arr[i]];\r\n  }\r\n\r\n  return _arr;\r\n}\r\n","import { getState } from 'services/Store';\r\nimport {\r\n  fieldCounterIncrement,\r\n  playerScoreIncrement\r\n} from 'services/Store/reducers/board';\r\nimport { start } from 'services/Store/reducers/gameStartFlag/gameStartFlagOptions';\r\nimport { setBoardFields } from 'services/Store/reducers/board';\r\n\r\nexport default (id) => () => {\r\n  const { fieldCounter, fields } = getState().board;\r\n  const { gameStartFlag } = getState();\r\n\r\n  if (fieldCounter === id && gameStartFlag === start) {\r\n    const updatedFields = fields.map((field) => {\r\n      if (field.id === id) {\r\n        field.status = 'success';\r\n      }\r\n\r\n      return field;\r\n    });\r\n\r\n    setBoardFields(updatedFields);\r\n    fieldCounterIncrement();\r\n    playerScoreIncrement();\r\n  }\r\n};\r\n","import { getStore } from 'services/Store';\r\nimport { BOARD_PLAYER_SCORE_INCREMENT } from './actionTypes';\r\n\r\nexport default () => {\r\n  getStore().dispatch({\r\n    type: BOARD_PLAYER_SCORE_INCREMENT\r\n  });\r\n};\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport grey from '@material-ui/core/colors/grey';\r\n\r\nconst StyleCell = makeStyles((theme) => ({\r\n  td: {\r\n    borderLeft: `1px solid ${grey[700]}`,\r\n    borderTop: `1px solid ${grey[700]}`\r\n  }\r\n}));\r\n\r\nexport default StyleCell;\r\n","import React from 'react';\r\nimport { tryToCatch } from './functions';\r\nimport Box from '@material-ui/core/Box';\r\nimport StyleCell from './style/StyleCell';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport green from '@material-ui/core/colors/green';\r\nimport red from '@material-ui/core/colors/red';\r\n\r\nexport default function BoardCell({ id, status }) {\r\n  const classes = StyleCell();\r\n\r\n  const handleChangeStatus = () => {\r\n    switch (status) {\r\n      case 'active':\r\n        return blue[500];\r\n      case 'success':\r\n        return green[500];\r\n      case 'fail':\r\n        return red[500];\r\n      case 'inactive':\r\n      default:\r\n        return 'white';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      style={{ backgroundColor: handleChangeStatus() }}\r\n      className={classes.td}\r\n      onClick={tryToCatch(id)}\r\n    ></Box>\r\n  );\r\n}\r\n","import { getState } from 'services/Store';\r\nimport { setPlayerTimeScore } from 'services/Store/reducers/player';\r\n\r\nexport default () => {\r\n  const { timeStartPlay } = getState().player;\r\n  const { timeEndPlay } = getState().player;\r\n\r\n  setPlayerTimeScore();\r\n\r\n  return timeEndPlay - timeStartPlay;\r\n};\r\n","import axios from 'axios';\r\n\r\nexport default async () => {\r\n  try {\r\n    const result = await axios(\r\n      'https://starnavi-frontend-test-task.herokuapp.com/winners'\r\n    );\r\n    return result.data;\r\n  } catch (error) {\r\n    console.error('error', error);\r\n  }\r\n};\r\n","import { setWinnersList } from 'services/Store/reducers/winnersList/actions';\r\nimport getWinnersListFromServer from './getWinnersListFromServer';\r\n\r\nexport default async () => {\r\n  const list = await getWinnersListFromServer();\r\n  list.reverse();\r\n\r\n  setWinnersList(list);\r\n};\r\n","import { getStore } from 'services/Store';\r\nimport { WINNERS_LIST_SET_LIST } from './actionTypes';\r\n\r\nexport default (payload) => {\r\n  getStore().dispatch({\r\n    type: WINNERS_LIST_SET_LIST,\r\n    payload\r\n  });\r\n};\r\n","import axios from 'axios';\r\nimport { refreshWinnersListToStore } from 'components/WinnersList/functions';\r\n\r\nexport default async (winner, date) => {\r\n  try {\r\n    await axios.post(\r\n      'https://starnavi-frontend-test-task.herokuapp.com/winners',\r\n      {\r\n        winner,\r\n        date\r\n      }\r\n    );\r\n    refreshWinnersListToStore();\r\n  } catch (error) {\r\n    console.log('cant send data to server ', error);\r\n  }\r\n};\r\n","import postSendWinners from './postSendWinners';\r\nimport { getState } from 'services/Store';\r\nimport { getCurrentDate } from 'utils';\r\n\r\nexport default async () => {\r\n  const { name, winnerFlag } = getState().player;\r\n  const currentDate = getCurrentDate();\r\n\r\n  if (winnerFlag === true) {\r\n    postSendWinners(name, currentDate);\r\n  }\r\n  if (winnerFlag === false) {\r\n    postSendWinners('Computer', currentDate);\r\n  }\r\n};\r\n","import updateServerWinners from './updateServerWinners';\r\nimport {\r\n  setPlayerWin,\r\n  setPlayerTimeEndPlay,\r\n  setPlayerTimeScore\r\n} from 'services/Store/reducers/player';\r\nimport { gameStop } from 'services/Store/reducers/gameStartFlag';\r\n\r\nexport default () => {\r\n  gameStop();\r\n  setPlayerTimeEndPlay();\r\n  setPlayerWin();\r\n  setPlayerTimeScore();\r\n  updateServerWinners();\r\n};\r\n","import { getStore } from 'services/Store';\r\nimport { PLAYER_SET_TIME_END_PLAY } from './actionTypes';\r\n\r\nexport default () => {\r\n  getStore().dispatch({\r\n    type: PLAYER_SET_TIME_END_PLAY\r\n  });\r\n};\r\n","import { getStore } from 'services/Store';\r\nimport { PLAYER_SET_WINNER_FLAG_TRUE } from './actionTypes';\r\n\r\nexport default () => {\r\n  getStore().dispatch({\r\n    type: PLAYER_SET_WINNER_FLAG_TRUE\r\n  });\r\n};\r\n","import { setPlayerLoose } from 'services/Store/reducers/player';\r\nimport { gameStop } from 'services/Store/reducers/gameStartFlag';\r\nimport updateServerWinners from './updateServerWinners';\r\n\r\nexport default () => {\r\n  gameStop();\r\n  setPlayerLoose();\r\n  updateServerWinners();\r\n};\r\n","import { getStore } from 'services/Store';\r\nimport { PLAYER_SET_WINNER_FLAG_FALSE } from './actionTypes';\r\n\r\nexport default () => {\r\n  getStore().dispatch({\r\n    type: PLAYER_SET_WINNER_FLAG_FALSE\r\n  });\r\n};\r\n","import Board from './Board';\r\n\r\nexport default Board;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getState } from 'services/Store';\r\nimport BoardCell from './BoardCell';\r\nimport { isObjEmpty } from 'utils';\r\nimport { fieldChangeStatus, BuildBoard } from './functions';\r\nimport {\r\n  handlerPlayerWin,\r\n  handlerPlayerLoose\r\n} from 'modules/DotsGame/functions';\r\nimport {\r\n  notstarted,\r\n  start\r\n} from 'services/Store/reducers/gameStartFlag/gameStartFlagOptions';\r\nimport {\r\n  fieldCounterIncrement,\r\n  pcScoreIncrement\r\n} from 'services/Store/reducers/board';\r\nimport { setPlayerTimeStartPlay } from 'services/Store/reducers/player';\r\nimport Box from '@material-ui/core/Box';\r\nimport StyleBoard from './style/StyleBoard';\r\n\r\nexport default connect((state) => {\r\n  return {\r\n    dificultySelected: state.gameDificulty.dificultySelected,\r\n    gameStartFlag: state.gameStartFlag,\r\n    fields: state.board.fields,\r\n    fieldCounter: state.board.fieldCounter\r\n  };\r\n})(function Board({ gameStartFlag, fields, fieldCounter }) {\r\n  const classes = StyleBoard()();\r\n  const { dificultySelected } = getState().gameDificulty;\r\n  const { playerScore, pcScore } = getState().board;\r\n  const { timeScore } = getState().player;\r\n  const fieldsLength = fields.length;\r\n  const delay = dificultySelected.delay;\r\n\r\n  // init fields\r\n  React.useEffect(() => {\r\n    if (!isObjEmpty(dificultySelected) && gameStartFlag === notstarted) {\r\n      BuildBoard();\r\n    }\r\n  }, [dificultySelected, gameStartFlag]);\r\n\r\n  // init fields\r\n  React.useEffect(() => {\r\n    if (gameStartFlag === start) {\r\n      setPlayerTimeStartPlay();\r\n    }\r\n  }, [gameStartFlag]);\r\n\r\n  // game logic\r\n  React.useEffect(() => {\r\n    let delayInterval;\r\n    const halfOfBoardFields = Math.ceil(fieldsLength / 2);\r\n\r\n    if (gameStartFlag === start) {\r\n      if (playerScore > halfOfBoardFields && halfOfBoardFields > 0) {\r\n        handlerPlayerWin();\r\n      } else if (pcScore > halfOfBoardFields && halfOfBoardFields > 0) {\r\n        handlerPlayerLoose();\r\n        fieldChangeStatus(fieldCounter, 'inactive');\r\n      } else if (fieldCounter <= fieldsLength) {\r\n        fieldChangeStatus(fieldCounter, 'active');\r\n\r\n        delayInterval = setInterval(() => {\r\n          fieldChangeStatus(fieldCounter, 'fail');\r\n          fieldCounterIncrement();\r\n          pcScoreIncrement();\r\n        }, delay || 2000);\r\n      }\r\n    }\r\n\r\n    // unmount\r\n    return () => {\r\n      clearInterval(delayInterval);\r\n    };\r\n  }, [\r\n    delay,\r\n    fieldCounter,\r\n    fieldsLength,\r\n    gameStartFlag,\r\n    pcScore,\r\n    playerScore,\r\n    timeScore\r\n  ]);\r\n\r\n  const boardCells = [];\r\n  for (let i = 0; i < fields.length; i++) {\r\n    boardCells.push(\r\n      <BoardCell\r\n        key={fields[i].id}\r\n        id={fields[i].id}\r\n        status={fields[i].status}\r\n        fieldCounter={fieldCounter}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box className={classes.root}>\r\n      <Box className={classes.board}>{boardCells}</Box>\r\n    </Box>\r\n  );\r\n});\r\n","import { getState } from 'services/Store';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport grey from '@material-ui/core/colors/grey';\r\n\r\nexport default () => {\r\n  const {\r\n    dificultySelected: { field }\r\n  } = getState().gameDificulty;\r\n\r\n  const boardSize = 450;\r\n  const coefficient = 0.8;\r\n\r\n  const StyleBoard = makeStyles((theme) => ({\r\n    root: {\r\n      margin: 'auto',\r\n      width: boardSize,\r\n      height: boardSize\r\n    },\r\n    board: {\r\n      display: 'grid',\r\n      gridTemplateColumns: `repeat(${field}, 1fr)`,\r\n      justifyContent: 'center',\r\n      gridTemplateRows: `repeat(${field}, ${boardSize / field}px)`,\r\n      alignItems: 'stretch',\r\n      borderBottom: `1px solid ${grey[700]}`,\r\n      borderRight: `1px solid ${grey[700]}`\r\n    },\r\n    '@media (max-width: 490px)': {\r\n      root: {\r\n        width: boardSize * coefficient,\r\n        height: boardSize * coefficient\r\n      },\r\n      board: {\r\n        gridTemplateRows: `repeat(${field}, ${(boardSize * coefficient) /\r\n          field}px)`\r\n      }\r\n    }\r\n  }));\r\n\r\n  return StyleBoard;\r\n};\r\n","import { getStore } from 'services/Store';\r\nimport { PLAYER_SET_TIME_START_PLAY } from './actionTypes';\r\n\r\nexport default () => {\r\n  getStore().dispatch({\r\n    type: PLAYER_SET_TIME_START_PLAY\r\n  });\r\n};\r\n","import { getStore } from 'services/Store';\r\nimport { BOARD_PC_SCORE_INCREMENT } from './actionTypes';\r\n\r\nexport default () => {\r\n  getStore().dispatch({\r\n    type: BOARD_PC_SCORE_INCREMENT\r\n  });\r\n};\r\n","import MainPanel from './MainPanel';\r\n\r\nexport default MainPanel;\r\n","import React from 'react';\r\nimport ConfigInputs from 'components/ConfigInputs';\r\nimport InfoText from 'components/InfoText';\r\nimport Board from 'components/Board';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nexport default function MainPanel() {\r\n  return (\r\n    <Box>\r\n      <ConfigInputs />\r\n      <InfoText />\r\n      <Board />\r\n    </Box>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport grey from '@material-ui/core/colors/grey';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    borderBottom: `1px solid ${grey[300]}`,\r\n    marginTop: 10\r\n  }\r\n}));\r\n\r\nexport default React.memo(function Winner({ name, date }) {\r\n  const classes = useStyles();\r\n  return (\r\n    <Box className={classes.root}>\r\n      <Typography variant={'subtitle2'}>{name}</Typography>\r\n      <Typography variant={'subtitle2'}>{date}</Typography>\r\n    </Box>\r\n  );\r\n});\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst WinnersListStyle = makeStyles((theme) => ({\r\n  root: {},\r\n  title: {\r\n    textAlign: 'center',\r\n    marginBottom: 15\r\n  },\r\n  listWrapper: {\r\n    overflowY: 'auto',\r\n    height: 500,\r\n    maxWidth: 500,\r\n    margin: '0 auto',\r\n    paddingRight: 10\r\n  },\r\n  '@media (max-width: 960px)': {\r\n    listWrapper: {\r\n      height: 200\r\n    }\r\n  }\r\n}));\r\n\r\nexport default WinnersListStyle;\r\n","import WinnersList from './WinnersList';\r\n\r\nexport default WinnersList;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Winner from './Winner';\r\nimport { refreshWinnersListToStore } from './functions';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { winnersListStyle } from './style';\r\n\r\nexport default connect((state) => {\r\n  return {\r\n    gameStartFlag: state.gameStartFlag,\r\n    winnersList: state.winnersList\r\n  };\r\n})(\r\n  React.memo(function WinnersList({ gameStartFlag, winnersList }) {\r\n    const classes = winnersListStyle();\r\n\r\n    React.useEffect(() => {\r\n      refreshWinnersListToStore();\r\n    }, [gameStartFlag]);\r\n\r\n    return (\r\n      <Box className={classes.root}>\r\n        <Typography className={classes.title} variant={'h4'}>\r\n          Winners Board\r\n        </Typography>\r\n        <Box className={classes.listWrapper}>\r\n          {winnersList.map((winner) => {\r\n            return (\r\n              <Winner key={winner.id} name={winner.winner} date={winner.date} />\r\n            );\r\n          })}\r\n        </Box>\r\n      </Box>\r\n    );\r\n  })\r\n);\r\n","import React from 'react';\r\nimport WinnersList from 'components/WinnersList';\r\nimport Box from '@material-ui/core/Box';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: 15\r\n  }\r\n}));\r\n\r\nexport default React.memo(function InfoPanel() {\r\n  const classes = useStyles();\r\n  return (\r\n    <Box className={classes.root}>\r\n      <WinnersList />\r\n    </Box>\r\n  );\r\n});\r\n","import InfoPanel from './InfoPanel';\r\n\r\nexport default InfoPanel;\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    height: '100%',\r\n    paddingTop: 20,\r\n    paddingBottom: 20\r\n  }\r\n}));\r\n\r\nexport default useStyles;\r\n","import DotsGame from './DotsGame';\r\n\r\nexport default DotsGame;\r\n","import React from 'react';\r\nimport MainPanel from 'sections/MainPanel';\r\nimport InfoPanel from 'sections/InfoPanel';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport useStyles from './style/useStyles';\r\n\r\nexport default function DotsGame() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Container className={classes.root}>\r\n      <Grid container>\r\n        <Grid item xs={12} md={8}>\r\n          <MainPanel />\r\n        </Grid>\r\n        <Grid item xs={12} md={4}>\r\n          <InfoPanel />\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport grey from '@material-ui/core/colors/grey';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    minHeight: 36,\r\n    backgroundColor: grey[300]\r\n    // color: '#fff'\r\n  },\r\n  toolBar: {\r\n    justifyContent: 'center',\r\n    textTransform: 'uppercase'\r\n  }\r\n}));\r\n\r\nexport default useStyles;\r\n","import Footer from './Footer';\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport useStyles from './style/useStyles';\r\n\r\nexport default React.memo(function Footer() {\r\n  const classes = useStyles();\r\n  const currentYear = new Date().getFullYear();\r\n  return (\r\n    <Box className={classes.root}>\r\n      <Typography variant={'subtitle1'}>©{currentYear}</Typography>\r\n    </Box>\r\n  );\r\n});\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    height: '100%'\r\n  },\r\n  gameWrapper: {\r\n    flexGrow: 1\r\n  }\r\n}));\r\n\r\nexport default useStyles;\r\n","import React from 'react';\r\nimport Header from 'components/Header';\r\nimport DotsGame from 'modules/DotsGame';\r\nimport Footer from 'components/Footer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Box from '@material-ui/core/Box';\r\nimport './style/global.css';\r\nimport { useStyles } from './style';\r\nimport 'typeface-roboto';\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  return (\r\n    <Box className={classes.root}>\r\n      <CssBaseline />\r\n\r\n      <Header />\r\n      <Box className={classes.gameWrapper}>\r\n        <DotsGame />\r\n      </Box>\r\n      <Footer />\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import App from './App';\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from 'App';\r\nimport {\r\n  newStore,\r\n  StoreProvider,\r\n  gameDificulty,\r\n  gameStartFlag,\r\n  player,\r\n  board,\r\n  winnersList\r\n} from 'services/Store';\r\n\r\nnewStore({ gameDificulty, gameStartFlag, player, board, winnersList });\r\n\r\nReactDOM.render(\r\n  <StoreProvider>\r\n    <App />\r\n  </StoreProvider>,\r\n  document.getElementById('root')\r\n);\r\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { getStore } from 'services/Store';\r\n\r\nexport default ({ children }) => (\r\n  <Provider store={getStore()}>{children}</Provider>\r\n);\r\n"],"sourceRoot":""}